"""
Компания производит программное обеспечение, предоставляющее различные функции в зависимости от
версии операционной системы пользователя.

Чтобы определить, какая версия более свежая, использует следующий метод:

Хотя эта функция работала для версий ОС 10.6, 10.7, 10.8 и 10.9, компания-производитель операционной
системы только что выпустила версию ОС 10.10.

Функция не работает для новой версии:

compare_versions ("10.9", "10.10");       # returns True, while it should return False

Теперь компания хочет потратить некоторое время на написание более надежной функции сравнения
версий, которая будет работать для любых будущих обновлений версий/подверсий.

Помогите написать эту функцию. Вот несколько примеров случаев:

compare_versions("11", "10");                    # returns True
compare_versions("11", "11");                    # returns True
compare_versions("10.4.6", "10.4");              # returns True
compare_versions("10.4", "11");                  # returns False
compare_versions("10.4", "10.10");               # returns False
"""

from itertools import zip_longest


def compare_versions(v1: str, v2: str) -> bool:
    """
    Проверяет соответствие текущей версии програмного обеспечения относительно новой версии.
    """
    return all(b <= a for a, b in zip_longest(*[map(int, x.split('.')) for x in (v1, v2)], fillvalue=0))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("11", "10"), True),
        (("11", "11"), True),
        (("10.4.6", "10.4"), True),
        (("10.4", "10.4.8"), False),
        (("10.4", "11"), False),
        (("10.4", "10.10"), False),
        (("10.4.9", "10.5"), False),
    )
    for key, val in data:
        assert compare_versions(*key) == val


if __name__ == '__main__':
    test()
