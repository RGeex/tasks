"""
Если вы достаточно взрослые, вы, возможно, помните, как купили свой первый мобильный телефон, один из старых, без сенсорного экрана, и с волнением в глазах отправили свое первое текстовое сообщение. Возможно, один из них все еще лежит где-то в ящике.

Давайте попробуем вспомнить старые добрые времена и каково было отправлять текстовые сообщения с помощью таких устройств. Многие из них имели разную раскладку, особенно для специальных символов и пробелов, поэтому для простоты мы будем использовать вымышленную модель с раскладкой клавиш 3x4, показанную ниже:

-------------------------
|   1   |   2   |   3   |  <-- hold a key to type a number
|  .,?! |  abc  |  def  |  <-- press a key to type a letter
-------------------------
|   4   |   5   |   6   |  <-- Top row
|  ghi  |  jkl  |  mno  |  <-- Bottom row
-------------------------
|   7   |   8   |   9   |
|  pqrs |  tuv  |  wxyz |
-------------------------
|   *   |   0   |   #   |  <-- hold for *, 0 or #
|  '-+= | space |  case |  <-- press # to switch between upper/lower case
-------------------------

Задача

Большой палец готов к работе, поэтому вы получите message и ваша задача — выяснить, какие клавиши вам нужно нажать, чтобы вывести данное сообщение с наименьшим возможным количеством нажатий . Верните результат в виде строки ключевых входных данных из верхней строки (см. диаграмму выше).

Не торопитесь, чтобы изучить правила, приведенные ниже.
Как это работает
Результат

Выходная строка содержит входные данные, которые отображаются в верхней строке макета клавиши. ( 0-9*#)
Ввод букв

Чтобы ввести буквы, нажимайте кнопку несколько раз, чтобы просмотреть возможные символы (нижний ряд раскладки клавиши). Нажатие представлено повторением элемента верхнего ряда клавиши. n раз, где n — позиция символа на этой конкретной клавише. Примеры:

    2 => 'а', 9999 => 'з', 111 => '?', *** => '+'

Ввод цифр

Ввод чисел 0-9 и специальные символы *# - Держи этот ключ. Удержание обозначается цифрой, за которой следует тире. Примеры:

    3- => '3', 5-5-5- => '555'

Прописные/строчные буквы

Изначально дело в том, lowercase. Для переключения между строчными и
прописными буквами используйте кнопку # символ. Переключение регистра
следует учитывать только в том случае, если следующий символ является
буквенным ( a-z). Примеры:

    #2#9999 => 'Az' (помните, это переключатель)
    27-#2255 => 'a7BK' (не переключайтесь раньше '7')

Жду следующего персонажа

Если у вас есть 2 или более символов в последовательности, которые находятся
на одной и той же кнопке (см. макет, нижний ряд), вам придется подождать,
прежде чем снова нажать ту же кнопку. Ожидание обозначается добавлением
пробела между двумя (или более) такими символами. Пример:

    44 444 44 444 => 'смотреть'

Исключения : нет необходимости ждать после нажатия любой клавиши, даже если
следующий символ находится на той же кнопке ( 4-4 => '4g'), или если на одной
кнопке есть переключение регистра между двумя символами ( #5#55 => 'Jk').
Пример

Чтобы собрать все воедино, давайте рассмотрим пример. Допустим, вы хотите
напечатать это сообщение — 'Def Con 1!':

    Переключитесь на верхний регистр с помощью # и нажмите 3 ( #3 => D)
    (теперь ввод ведется в верхнем регистре)
    Переключитесь на строчные буквы и нажмите 3 дважды ( #33 => e). из-за
    переключения регистра нет (Обратите внимание, что ожидания )
    Следующий персонаж f включена кнопка 3 еще раз и имеет тот же регистр
    (ввод строчных букв и символ нижнего регистра), поэтому вам придется
    подождать, чтобы ввести еще раз ( ' 333' => f).
    Аналогичным образом наберите второе слово (пробел находится на цифре 0).
    0#222#666 660 => ' Con '
    Завершите, удерживая 1 как 1- и печатаю ! как 1111 ( '1-1111' = 1!).
    Обратите внимание: после удержания клавиши вам не нужно ждать, чтобы
    нажать другую клавишу.

Результат:

send_message("Def Con 1!") => "#3#33 3330#222#666 6601-1111"

Дополнительные примеры приведены в образце набора тестов.

Все входные данные будут действительными строками и состоят только из символов
из таблицы раскладки клавиш. 
"""
  

from functools import reduce


def send_message(s: str) -> str:
    """
    Создает наименьшее нажатий клавиш телефона для написания заданного текста.
    """
    x, r, c = '\'-+= .,?! abc def ghi jkl mno pqrs tuv wxyz'.split(), '', 0
    db = reduce(lambda a, b: a | b, [{n: str(i or '*') * j for j, n in enumerate(x, 1)} for i, x in enumerate(x)] + [{' ': '0'}])
    for w in s:
        x, (r, c) = str(db.get(w.lower(), f'{w}-')), (f'{r}#', not c) if w.isalpha() and c != w.isupper() else (r, c)
        r += [' ', ''][not r or r[-1] != x[0]] + x
    return r


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("hey", "4433999"),
        ("one two three", "666 6633089666084477733 33"),
        ("Hello World!", "#44#33555 5556660#9#66677755531111"),
        ("Def Con 1!", "#3#33 3330#222#666 6601-1111"),
        ("A-z", "#2**#9999"),
        ("1984", "1-9-8-4-"),
        ("Big thanks for checking out my kata", "#22#444 4084426655777703336667770222443322255444664066688 806999055282"),
    )

    for key, val in data:
        assert send_message(key) == val


if __name__ == '__main__':
    test()
