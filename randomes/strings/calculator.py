"""
Точечный калькулятор

Вы должны написать калькулятор, который получает строки для ввода. Точки будут представлять число в уравнении. С одной стороны будут точки, оператор и точки снова после оператора. Точки и оператор будут разделены одним пространством.

Вот следующие действительные операторы:

    + Добавление
    - Вычитание
    * Умножение
    // Целочисленное подразделение

Ваша работа (задача)

Вам придется вернуть строку, которая содержит точки, так как многие уравнения возвращаются. Если результат равен 0, верните пустую строку. Когда дело доходит до вычитания, первое число всегда будет больше или равно второму числу.
Примеры (input => output)

* "..... + ..............." => "...................."
* "..... - ..."             => ".."
* "..... - ."               => "...."
* "..... * ..."             => "..............."
* "..... * .."              => ".........."
* "..... // .."             => ".."
* "..... // ."              => "....."
* ". // .."                 => ""
* ".. - .."                 => ""
"""
import typing
import unittest


def calculator(st: str) -> str:
    """
    Точечный калькулятор.
    """
    return '.' * eval(''.join([str(len(x)), x][not i] for i, x in enumerate(st.split(), -1)))


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(calculator, (
        ("..... + ...............",  "...................."),
        ("..... - ...",  ".."),
        ("..... - .",  "...."),
        ("..... * ...",  "..............."),
        ("..... * ..",  ".........."),
        ("..... // ..",  ".."),
        ("..... // .", "....."),
        (". // ..", ""),
        (". - .", ""),
    ))
