"""
Нам нужно найти самую длинную подстроку одинаковых символов в
очень длинной строке.

Давайте посмотрим пример:

s1 = "1111aa994bbbb1111AAAAAFF?<mmMaaaaaaaaaaaaaaaaaaaaaaaaabf"

Самая длинная подстрока в s1 является "aaaaaaaaaaaaaaaaaaaaaaaaa" имеющий
длину 25, состоящий из символа "a", с соответствующим ему кодом ascii,
равным "97", и имеющий начальный индекс 29 и финальный 53.

Мы выражаем результаты с помощью массива в следующем порядке: ["97", 25, [29,53]]

Символы '!"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~' которые могут иметь строки, будут
рассматриваться как шум, поэтому они не могут быть решением, даже если подстрока,
состоящая из одной из них, является самой длинной из всех. Другими словами,
разрешенными символами могут быть прописные или строчные буквы английского
алфавита или десятичные цифры ( '0123456789')

Давайте рассмотрим пример, показывающий, что произойдет, если у нас есть
небуквенно-цифровые символы.

s2 = "1111aa994bbbb1111AAAAAFF????????????????????????????" Самая длинная
подстрока "AAAAA" поэтому результат для него:

['65', 5, [17, 21]]

Если имеется две и более подстрок с максимальным значением длины, будет
выбрана та, которая начинается первой, слева направо.

Создайте гибкий код, который может выводить массив, подобный показанному
выше, при получении огромной строки.
"""


from itertools import groupby


def find_longest_substr(s: str) -> list:
    """
    Поиск в стоке параметров самой длинной подстроки идентичных символов.
    """
    x = max([a * len(list(b)) for a, b in groupby(s) if a.isalpha() or a.isdigit()], key=len)
    return [f'{ord(x[-1])}', len(x), [n := s.index(x), n + len(x) - 1]]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("1111aa994bbbb1111AAAAAFF?<mmMaaaaaaaaaaaaaaaaaaaaaaaaabf", ['97', 25, [29, 53]]),
        ("1111aa994bbbb1111AAAAAFF????????????????????????????",['65', 5, [17, 21]]),
        ("1111aa994bbbb1111AAAAAFFcfgBBBBB",['65', 5, [17, 21]]),
    )
    for key, val in data:
        assert find_longest_substr(key) == val


if __name__ == '__main__':
    test()
