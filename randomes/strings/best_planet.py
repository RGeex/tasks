"""
 Космическое агентство недавно запустило новый спутник с основной целью
 определить наиболее подходящую планету в данной солнечной системе для
 поддержания человеческой жизни. Спутник способен сканировать целые
 солнечные системы и добавлять каждую обнаруженную планету в список.
 При вводе планет в массив спутник использует следующий формат:
 [элементы]_[площадь поверхности]. В этом формате каждый элемент
 представлен своим химическим символом из таблицы Менделеева.
 Например, планета, состоящая из водорода (H), кислорода (O) и
 азота (N), с площадью поверхности 100 тысяч квадратных миль,
 будет обозначена следующим образом:

    HON_100

Вы получите список, включающий все планеты Солнечной системы, а также
максимальный размер планеты для жизни человека. Ваша задача - определить
планету, которая обладает всеми необходимыми элементами для жизни человека,
будучи при этом как можно более большой. Необходимые элементы для жизни
человека: водород (H), углерод (C), азот (N), кислород (O), фосфор (P) и
кальций (Ca). Эти элементы представлены следующим образом:

["H", "O", "N", "C", "P", "Ca"]

Если ни одна из планет не соответствует требованиям, верните пустую строку, "".
Наконец, несколько планет могут содержать все необходимые элементы; в этом случае
верните планету, размер которой ближе всего к максимально возможному.

Пример:

["OHNCCaP_100", "OHC_200", "OCa_50", "OHCCaP_400", "OHNCCaP_225", "OHCa_250"], 250 --> "OHNCCaP_225"

Примечание:

    Используются только элементы от 1 до 118, повторяющихся элементов на планете нет.
"""


import re


def best_planet(solar_system: list[str], max_size: int) -> str:
    """
    Поиск жизнеспособной для людей планеты с максимальной площадью,
    в рамках заданных размеров.
    """
    x = {"H", "O", "N", "C", "P", "Ca"}
    v = filter(lambda e: not x - set(re.findall(r'[A-Z][a-z]?', e)) and int(e.split('_')[1]) <= max_size, solar_system)
    return max(v, key=lambda e: int(e.split('_')[1]), default='')


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((['OHNCCaP_100', 'OHC_200', 'OCa_50', 'OHCCaP_400', 'OHNCCaP_225'],  250), 'OHNCCaP_225'),
        ((['OHNCCaP_225', 'OHC_200', 'OCa_50', 'OHCCaP_400', 'OUNCCaP_250'],  250), 'OHNCCaP_225'),
        ((['OHNCCaP_225', 'OHC_200', 'OCa_350', 'OHCCaP_400', 'OHUNCCaP_225'], 50), ''),
        ((['OHNCCaP_225', 'OHC_200', 'OCa_50', 'OHCCaP_400', 'OUNCCaP_250'],   50), ''),
    )
    for key, val in data:
        assert best_planet(*key) == val


if __name__ == '__main__':
    test()
