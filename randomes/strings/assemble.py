"""
Задача

В этой задаче вам необходимо восстановить строку из списка ее копий.

Вы получите массив строк. Все они должны быть такими же, как оригинал, но,
к сожалению, они были повреждены, что означает, что некоторые символы были
заменены звездочками ( "*").

Вам необходимо восстановить исходную строку на основе имеющейся у вас
неповрежденной информации. Если в некоторых случаях невозможно определить,
каким был исходный символ, используйте "#" символ в качестве специального
маркера для этого.

Если массив пуст, верните пустую строку.
Примеры:

input = [
  "a*cde",
  "*bcde",
  "abc*e"
]
result = "abcde"


input = [
  "a*c**",
  "**cd*",
  "a*cd*"
]
result = "a#cd#"
"""


def assemble(arr: list[str]) -> str:
    """
    Пытается восстановть исходную строку из резервных копий.
    """
    return ''.join([(w := set(x) - {'*',}) and w.pop() or '#' for x in zip(*arr)])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (['H*llo, W*rld!', 'Hel*o, *or*d!', '*ello* World*'], 'Hello, World!'),
        (['.** . ." ."" ! ! .', '. . . ." **" ! * .', '* . .*.* ."" * ! .', '. . .*." .**** ! .', '**. * .* .*" ! ! .'], '. . . ." ."" ! ! .'),
        (['. . . .', '. . . .', '. . . .', '. . . .', '. . . .'], '. . . .'),
        (['12***6789', '**3456789', '12345**8*', '***456**9', '1*3*5*7*9', '*2*456789'], '123456789'),
        (['******', '******', '******', '******'], '######'),
        (['*#*#*#*#*#*#*#*', '*#*#*#*#*#*#*#*', '*#*#*#*#*#*#*#*', '*#*#*#*#*#*#*#*'], '###############'),
        ([], ''),
    )
    for key, val in data:
        assert assemble(key) == val


if __name__ == '__main__':
    test()
