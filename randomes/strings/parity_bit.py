"""
В телекоммуникациях мы используем кодирование информации для обнаружения и
предотвращения ошибок при отправке данных.

Бит четности — это бит, добавляемый к строке двоичного кода, который указывает,
является ли количество единиц 1 бит в строке четным или нечетным. Биты четности
используются как простейшая форма кода обнаружения ошибок и могут обнаружить
ошибку в 1 бит.

В данном случае мы используем четность: бит четности установлен в значение 0
если количество 1-bits четный и имеет значение 1 если странно.

Мы используем их для передачи символов ASCII в двоичном виде (7-битные строки):
четность добавляется в конец 7-битной строки, образуя 8-й бит.

В этом ката вы должны проверить наличие 1-битных ошибок и вернуть новую строку,
состоящую из всех правильных символов ASCII в 7-битном формате (удаляя бит четности),
или "error" вместо символов ASCII, в которых были обнаружены ошибки.

Дополнительную информацию о битах четности: https://en.wikipedia.org/wiki/Parity_bit.
Примеры

Исправьте 7-битную строку с битом четности в качестве 8-го бита:

"01011001" <-- The "1" on the right is the parity bit.

В этом примере имеется три 1-бита. Три — нечетное число, а бит четности
установлен в значение 1. Никаких ошибок не обнаружено, поэтому верните "0101100" (7 бит).

Пример строки символов ASCII:

"01011001 01101110 01100000 01010110 10001111 01100011"

Это должно вернуться:

"0101100 error 0110000 0101011 error 0110001"
"""



def parity_bit(s: str) -> str:
    """
    Проверяет целостность переданных бинарных данных на основе бита правды.
    """
    return ' '.join([['error', x[:-1]][x[:-1].count('1') % 2 == int(x[-1])] for x in s.split()])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("01011001", "0101100"),
        ("01101110 01100000", "error 0110000"),
        ("10100011 00111001 11001100", "1010001 0011100 1100110"),
    )
    for key, val in data:
        assert parity_bit(key) == val


if __name__ == '__main__':
    test()
