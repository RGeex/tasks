"""
Возьмите следующий IPv4-адрес: 128.32.10.1

Этот адрес состоит из 4 октетов, каждый из которых представляет собой один
байт (или 8 бит).

    1-й октет 128имеет двоичное представление: 10000000
    2-й октет 32имеет двоичное представление: 00100000
    3-й октет 10имеет двоичное представление: 00001010
    4-й октет 1имеет двоичное представление: 00000001

Так 128.32.10.1 == 10000000.00100000.00001010.00000001

Поскольку приведенный выше IP-адрес имеет 32 бита, мы можем представить его
как беззнаковое 32-битное число: 2149583361

Завершите функцию, которая принимает 32-битное число без знака и возвращает
строковое представление его IPv4-адреса.
Примеры

2149583361 ==> "128.32.10.1"
32         ==> "0.0.0.32"
0          ==> "0.0.0.0"
"""


import re


def int32_to_ip(int32: int) -> str:
    """
    Переводит целое число в ipv4 адрес.
    """
    return '.'.join([f'{int(x, 2)}' for x in re.findall(r'.{8}', f'{int32:0>32b}')])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (0, "0.0.0.0"),
        (2149583361, "128.32.10.1"),
        (2154959208, "128.114.17.104"),
    )
    for key, val in data:
        assert int32_to_ip(key) == val


if __name__ == '__main__':
    test()
