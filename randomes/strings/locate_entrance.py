"""
Задача

Сотрудник желает уволиться. Не отпускайте его.

Найдите вход в его офис, чтобы мы могли отправить его координаты в
служба орбитального размещения препятствий (OOPS).

План офиса представлен в виде списка (Python) или массива (Java) строк.
Стены отмечены значком # и интерьер с .. Строки могут различаться по длине,
и если это так, выровняйте их по левому краю.

Вернуть координаты входа в офис в виде кортежа (x, y) в Python или Point в
Java. Вверху слева есть (0, 0), x ориентирован вправо («столбцы») и y вниз
(«строки»):

+----> x
|
|
V
y

Примеры

###.###
#.....#
#.....#  ->  (3, 0)
#....##
######

 #####
 #...#
 ....#
 #...#  ->  (1, 2)
##...#
#....#
######
"""


import re
from itertools import zip_longest as zl


def locate_entrance(arr: list[str]) -> tuple:
    """
    Поиск выхода из помещения.
    """
    for n, var in enumerate((arr, zl(*arr, fillvalue=' '))):
        for i, s in enumerate(var):
            if x := re.search(r'(^\s*\.)|(\.\s*$)', ''.join(s)):
                return (i, [x.end() - 1, x.start()][not x.group(1)])[::n or -1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([  '###.###',
            '#.....#',
            '#.....#',
            '#.....#',
            '#######'], (3, 0)),
        
        ([  '#######',
            '#......',
            '#.....#',
            '#.....#',
            '#######'], (6, 1)),
        
        ([  '#######',
            '#.....#',
            '#.#.###',
            '#.#',
            '###'], (3, 2)),
        
        ([  '######',
            '#....##',
            '#......',
            '#....##',
            '#....#',
            '######'], (6, 2)),
        
        ([  ' #####',
            ' #...#',
            ' ....#',
            ' #...#',
            '##...#',
            '#....#',
            '######'], (1, 2)),
    )
    for key, val in data:
        assert locate_entrance(key) == val


if __name__ == '__main__':
    test()
