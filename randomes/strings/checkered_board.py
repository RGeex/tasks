"""
Напишите функцию, которая принимает один параметр, представляющий размеры клетчатой
доски. Доска всегда будет квадратной, поэтому цифра 5 означает, что вам понадобится
доска 5x5.

Темные квадраты будут представлены белым квадратом Юникода, а светлые квадраты будут
представлены черным квадратом Юникода (противоположные цвета гарантируют, что доска не
будет выглядеть перевернутой на темном фоне кодовых войн). Он должен возвращать строку
доски с пробелом между каждым квадратом и с учетом новых строк.

Четное число должно возвращать доску, начинающуюся с темного квадрата. Нечетное число
должно возвращать доску, начинающуюся со светлого квадрата.
Примеры

Input: 5

Output:
■ □ ■ □ ■
□ ■ □ ■ □
■ □ ■ □ ■
□ ■ □ ■ □
■ □ ■ □ ■

В конце каждой строки не должно быть пробелов или символов новой строки.
Примечание

Квадраты — это символы ■ и □ с кодами \u25A0 и \u25A1.
Не используйте объекты HTML для квадратов (например, □ для белого квадрата), поскольку код
не считает его допустимым квадратом. Хороший способ проверить — печатает ли ваше решение
правильную шахматную доску на локальном терминале.

Рубиновое примечание: У CodeWars есть проблемы с кодированием отображаемого Юникода в Ruby.
Вам нужно будет использовать исходный код Юникод (например, «\u25A0») вместо отображаемого
Юникод (например, «■»).
"""
import typing
import unittest


def checkered_board(n: int) -> str:
    """
    Рисует шихматную достку заданного размера.
    """
    return '\n'.join([' '.join((['\u25A0', '\u25A1'][::(i + n % 2) % 2 or -1] * n)[:n]) for i in range(n)])


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(checkered_board, (
        (2, "□ ■\n■ □"),
        (3, "■ □ ■\n□ ■ □\n■ □ ■"),
        (7, "■ □ ■ □ ■ □ ■\n□ ■ □ ■ □ ■ □\n■ □ ■ □ ■ □ ■\n□ ■ □ ■ □ ■ □\n■ □ ■ □ ■ □ ■\n□ ■ □ ■ □ ■ □\n■ □ ■ □ ■ □ ■"),
    ))
