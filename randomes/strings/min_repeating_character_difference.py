"""
Напишите функцию, которая принимает текст строки и возвращает минимальное значение между позициями
двух повторяющихся символов в строке и самого этого символа.

Минимальное значение между позициями двух повторяющихся символов — это разница между индексами этих
символов.

Например, в строке «aabcba» минимальная разница позиций повторяющихся символов будет равна 1, так
как для символа «а» разница позиций будет равна 1.

Результатом должен быть кортеж.

Если в строке нет повторяющихся символов, выводится None.

В строке могут быть только строчные буквы и ничего больше!!!(пустая строка быть не может)

Если разница между повторяющимися символами одинакова, выведите первый встреченный символ.

Примеры результатов:

"аа" => (1, 'а')

"aabbca" => (1, 'а')

"абка" => (3, 'а')

"abcded" => (2, 'd')

"abbbbbc" => (1, 'б')

"abc" => Нет

"""


def min_repeating_character_difference(text: str) -> tuple | None:
    """
    Поиск минимального расстояниями между одинаковыми символами в строке.
    """
    r, t = None, {}
    for i, x in enumerate(text):
        if (h := i - t.get(x, i)):
            r = min(r, (h, x), key=lambda x: x[0]) if r else (h, x)
        t[x] = i
    return r


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("aabbca", (1, 'a')),
        ("abded", (2, 'd')),
        ("abbbbbc", (1, 'b')),
        ("aa", (1, 'a')),
        ("aba", (2, 'a')),
    )
    for key, val in data:
        assert min_repeating_character_difference(key) == val


if __name__ == '__main__':
    test()
