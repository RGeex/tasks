"""
Учитывая имя, превратите это имя в идеальную квадратную матрицу
(вложенный массив с количеством массивов, эквивалентным длине
каждого массива).

Вам нужно будет добавить периоды ( .) в конец имени, если необходимо,
чтобы превратить его в матрицу.

Если имя имеет длину 0, верните "name must be at least one letter"
Примеры

"Bill" ==> [ ["B", "i"],
             ["l", "l"] ]

"Frank" ==> [ ["F", "r", "a"],
              ["n", "k", "."],
              [".", ".", "."] ]
"""


def matrixfy(s: str) -> list[list[str]] | str:
    """
    Если переана не пустая строка разбивает ее посимвольно на квадратную матрицу,
    заменяя недостающие символы точками, или выводит сообщение об ошибке при пустой строке.
    """
    n, x, c = int(x := len(s) ** .5) + bool(x % 1), list(s), "name must be at least one letter"
    return [[x and x.pop(0) or '.' for _ in range(n)] for _ in range(n)] if s else c


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("", "name must be at least one letter"),
        ("G", [["G"]]),
        ("Beyonce", [["B", "e", "y"], ["o", "n", "c"], ["e", ".", "."]]),
        ("Franklin", [["F", "r", "a"], ["n", "k", "l"], ["i", "n", "."]]),
        ("Bill", [["B","i"], ["l","l"]]),
        ("Frank", [['F', 'r', 'a'], ['n', 'k', '.'], ['.', '.', '.']]),
    )
    for key, val in data:
        assert matrixfy(key) == val


if __name__ == '__main__':
    test()
