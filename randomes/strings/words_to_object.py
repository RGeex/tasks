"""
Вам дана строка, содержащая последовательность слов, разделенных пробелами.
Допустим, это последовательность шаблонов: имя и соответствующий номер — вот так:

"red 1 yellow 2 black 3 white 4"

Вы хотите превратить его в другую строку объектов, с которой планируете
работать позже, например:

"[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'},
{name : 'white', id : '4'}]"

Делать это вручную очень больно. Итак, вы решили написать короткую функцию,
которая заставит компьютер делать всю работу за вас. Имейте в виду, что шаблон
не обязательно представляет собой слово и число. Рассмотрим все, что разделено
пробелом, но не забывайте: массив объектов с двумя элементами: name и id.

В результате у вас будет строка, которую вы можете просто скопировать и
вставить всякий раз, когда вам захочется определить список объектов - теперь без
необходимости вводить имена, идентификаторы, фигурные скобки, знаки двоеточия,
все портить, проваливать поиск опечатка и начать заново. Это может пригодиться
при работе с большими списками.
"""


def words_to_object(s: str) -> str:
    """
    Преобразует строку в список словарей как новую строку.
    """
    return '[' + ', '.join(["{{name : '{0}', id : '{1}'}}".format(*s.split()[i*2:i*2+2]) for i in range(len(s.split()) // 2)]) + ']'


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("red 1 yellow 2 black 3 white 4", "[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]"),
        ("1 red 2 white 3 violet 4 green", "[{name : '1', id : 'red'}, {name : '2', id : 'white'}, {name : '3', id : 'violet'}, {name : '4', id : 'green'}]"),
        ("1 1 2 2 3 3 4 4", "[{name : '1', id : '1'}, {name : '2', id : '2'}, {name : '3', id : '3'}, {name : '4', id : '4'}]"),
        ("#@&fhds 123F3f 2vn2# 2%y6D @%fd3 @!#4fs W@R^g WE56h%", "[{name : '#@&fhds', id : '123F3f'}, {name : '2vn2#', id : '2%y6D'}, {name : '@%fd3', id : '@!#4fs'}, {name : 'W@R^g', id : 'WE56h%'}]"),
        ("", "[]"),
    )
    for key, val in data:
        assert words_to_object(key) == val


if __name__ == '__main__':
    test()
