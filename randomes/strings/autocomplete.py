"""
Пришло время создать функцию автозаполнения! Ура!

Функция автозаполнения принимает входную строку и массив словаря и возвращает
значения из словаря, которые начинаются с входной строки. Если совпадений
более 5, ограничьте вывод первыми 5 результатами. Если совпадений нет,
верните пустой массив.

Пример:

autocomplete('ai', ['airplane','airport','apple','ball']) = ['airplane','airport']

Для этой ката словарь всегда будет действительным массивом строк.
Пожалуйста, верните все результаты в порядке, указанном в словаре,
даже если они не всегда в алфавитном порядке. Поиск НЕ должен быть
чувствительным к регистру, но регистр слова должен сохраняться при
его возврате.

Например, «Apple» и «аэропорт» вернутся при вводе «a». Однако они должны
вернуться как «Apple» и «аэропорт» в исходных случаях.

Важная заметка:

Любой ввод, который НЕ является буквой, должен рассматриваться так, как будто
его нет. Например, ввод «$%^» следует трактовать как «»,
а ввод «ab*&1cd» — как «abcd».
"""


import re


def autocomplete(input_: str, dictionary: list[str]) -> list[str]:
    """
    Поиск слов в списке, начинающихся с указанных, исключая все символы не являющиеся буквами.
    Результат ограничен 5 словами.
    """
    return [w for w in dictionary if w.lower().startswith(re.sub(r'[^a-zA-Z]', '', input_.lower()))][:5]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    dct = [
        'abnormal',
        'arm-wrestling',
        'absolute',
        'airplane',
        'airport',
        'amazing',
        'apple',
        'ball'
    ]

    data = (
        (('ai', dct), ['airplane','airport']),
        (('a', dct), ['abnormal','arm-wrestling','absolute','airplane','airport']),
    )
    for key, val in data:
        assert autocomplete(*key) == val


if __name__ == '__main__':
    test()
