"""
В строке расставлены скобки '()', '[]', '{}'.
Определить является ли строка валидной:
    - у каждой открывающей скобки есть парная закрывающая
    - у каждой закрывающей есть парная открывающая
    - соблюдается порядос скобок ('([)]' - недопустимо)
"""


def is_valid_brackets(s: str) -> bool:
    """
    Проверяет является ли строка валидной.
    """
    n, t = [[], []], '(){}[]'
    x = dict(t[x*2:x*2+2] for x in range(len(t)//2))
    for i in s:
        if i in t:
            n[i in x].append(x.get(i, i))
            if len(n[0]) > len(n[1]):
                break
            if len(n[0]) == len(n[1]):
                if n[0] != n[1][::-1]:
                    break
                n = [[], []]
    return n[0] == n[1][::-1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('', True),
        ('()', True),
        ('()[]{}', True),
        ('([{}])', True),
        ('(([{[]}]))', True),
        ('((.[..{?[!]}]))', True),
        (')(', False),
        ('(()', False),
        ('[)(]', False),
        ('()[](', False),
        ('(()))(', False),
        ('([{[]}]))', False),
        ('(([{[]]))', False),
        ('(([{[]])})', False),
    )
    for key, val in data:
        assert is_valid_brackets(key) == val


if __name__ == '__main__':
    test()
