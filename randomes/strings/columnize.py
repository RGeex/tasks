"""
Вам дан массив строк, которые нужно распределить по N столбцам. Ширина каждого
столбца должна быть такой же, как длина самой длинной строки внутри него.

Отдельные столбцы с " | ", и строки с "\n"; контент должен быть выровнен по
левому краю.

{"1", "12", "123", "1234", "12345", "123456"} должно стать:

1     
12    
123   
1234  
12345 
123456

за 1 столбец,

1     | 12    
123   | 1234  
12345 | 123456

на 2 колонки,

1     | 12     | 123 | 1234
12345 | 123456

на 4 столбца.
"""


from itertools import zip_longest as zl


def columnize(arr: list[str], n: int) -> str:
    """
    Разбивает переданный список по указанному кол-ву колонак.
    """
    return '\n'.join([' | '.join(filter(lambda x: x is not None, x)) for x in zl(*[[f'{x:<{max(map(len, arr[i::n]))}}' for x in arr[i::n]] for i in range(min(n, len(arr)))])])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (
            (["1", "12", "123", "1234", "12345", "123456"], 1),
            "1     \n12    \n123   \n1234  \n12345 \n123456",
        ),
        (
            (["1", "12", "123", "1234", "12345", "123456"], 3),
            "1    | 12    | 123   \n1234 | 12345 | 123456",
        ),
        (
            (["1", "12", "123", "1234", "12345", "123456"], 5),
            "1      | 12 | 123 | 1234 | 12345\n123456",
        ),
        (
            (["1", "12", "123", "1234", "12345", "123456"], 999),
            "1 | 12 | 123 | 1234 | 12345 | 123456",
        ),
        (
            (["", "12", "123", "", "12345", ""], 2),
            "      | 12\n123   |   \n12345 |   ",
        ),
        (
            (["", "", "", ""], 2),
            " | \n | ",
        ),
        (
            (["1          ", "12", "123", "1234", "12345", "      "], 2),
            "1           | 12    \n123         | 1234  \n12345       |       ",
        ),
    )
    for key, val in data:
        assert columnize(*key) == val


if __name__ == '__main__':
    test()
