"""
Задача:

Дано 2 строки. Необходимо:
1. Сократить попарно, одинаковые символы между первой и второй строкой.
2. Оставшиеся символы второй строки вставить в разрывы от сокращений
    первой строки, на каждое место по 1 символу, не меняя порядок.
    Если разрывов нет, остатки второй строки вставить в конец первой.

Пример:

- Даны строки: "abcddbef" & "sbbbdeghs".
- Далее находим парные символы из первой строки во второй: "bbde".
- Далее удаляем из первой и второй строк найденные символы, получится: "acdf" & "sbghs".
- Далее оставшиеся символы из второй строки ставим на места удаленных в первой строке,
  по 1 символу на каждый удалённый, получится: "ascbdghf" & "s".
- Оставшиеся во второй строке символы переносим в конец первой, получится: "ascbdghfs".
"""

from itertools import zip_longest


def combination(s: str, w: str) -> str:
    (a, b), c = map(list, (s, w)), '\t'

    for i, x in enumerate(s):
        if x in b:
            a[i] = c
            b.remove(x)

    return ''.join(a + b for a, b in zip_longest(''.join(a).split(c), b, fillvalue=''))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (('', ''), ''),
        (('abcd', ''), 'abcd'),
        (('', 'abcd'), 'abcd'),
        (('a b c', ' '), 'ab c'),
        (('z', 'abcd'), 'zabcd'),
        (('abcd', 'z'), 'abcdz'),
        (('abcd', 'bz'), 'azcd'),
        (('abcddbef', 'sbbbdeghs'), 'ascbdghfs'),
    )
    for key, val in data:
        assert combination(*key) == val


if __name__ == '__main__':
    test()
