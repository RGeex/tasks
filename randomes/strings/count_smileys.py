"""
Учитывая массив (arr) в качестве аргумента, завершите функцию countSmileys это должно вернуть
общее количество улыбающихся лиц.

Правила улыбающегося лица:

    Каждый смайлик должен содержать действительную пару глаз. Глаза можно обозначить как :или ;
    У смайлика может быть нос, но это не обязательно. Допустимые символы для носа: -или ~
    У каждого улыбающегося лица должен быть улыбающийся рот, отмеченный либо )или D

Никакие дополнительные символы, кроме упомянутых, не допускаются.

Примеры допустимых смайлов: :) :D ;-D :~)
Недопустимые смайлы: ;( :> :} :]
Пример

countSmileys([':)', ';(', ';}', ':-D']);       // should return 2;
countSmileys([';D', ':-(', ':-)', ';~)']);     // should return 3;
countSmileys([';]', ':[', ';*', ':$', ';-D']); // should return 1;

Примечание

В случае пустого массива верните 0. Вы не будете проверять недопустимый ввод
(ввод всегда будет массивом). Порядок элементов лица (глаза, нос, рот) всегда будет одинаковым.
"""

from itertools import product


def count_smileys(arr: list[str]) -> int:
    """
    Подсчитывает кол-во улыбающихся смайлов в списке.
    """
    s = [''.join(x).replace(' ', '') for x in product(*[':;', '- ~', 'D)'])]
    return sum(x in s for x in arr)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([], 0),
        ([':D', ':~)', ';~D', ':)'], 4),
        ([':)', ':(', ':D', ':O', ':;'], 2),
        ([';]',  ':[', ';*', ':$', ';-D'], 1),
    )
    for key, val in data:
        assert count_smileys(key) == val


if __name__ == '__main__':
    test()