"""
Задача

Напишите функцию под названием which_postcode/ whichPostcodeФункция принимает
строку и определяет, представляет ли она британский или словацкий почтовый индекс.
Если строка является допустимым британским почтовым индексом, возвращает "GB"Если
это действительный словацкий почтовый индекс, верните "SK"Если введенный текст не
является ни действительным британским, ни действительным словацким почтовым индексом,
верните "Not valid".

Начальные и конечные пробелы следует игнорировать, но если в середине почтового
индекса есть пробелы в неправильном месте, то он недействителен.

Вводимые данные всегда будут действительным британским почтовым индексом,
действительным словацким почтовым индексом или недействительным почтовым индексом.
Британские почтовые индексы

Чтобы считаться действительным, британский почтовый индекс должен соответствовать
следующим правилам:

    Состоит из набора букв и цифр, разделенных на два сегмента одним пробелом.
    Первый сегмент должен начинаться с одной или двух букв, за которыми следуют
    одна или две цифры. Пример: G4, G40, DN4 или DN11
    Второй сегмент должен начинаться с цифры, за которой следуют две буквы.
    Пример: 1AB

Британские почтовые индексы не чувствительны к регистру,
поэтому Se21 7aAявляется действительным почтовым индексом.
Словацкие почтовые индексы

    Состоит из 5 цифр, где первые 3 отделены пробелом от последних 2 цифр.
    Пример: 123 45.

Примеры
Действительные британские почтовые индексы:

      G4 7AH
    G12 8NU   
    Dn1 1aA
    SE21 7AA

Действительные словацкие почтовые индексы:

     040 01
    810 08  
    984 59

Неверные почтовые индексы:

    0765 820- В первом сегменте должно быть только 3 цифры, во втором сегменте — 2 цифры.
    SE 21 7AA- Должен содержать только 2 сегмента
    070  08- Два сегмента должны быть разделены одним, а не двумя пробелами.
"""
import typing
import unittest
import re


def which_postcode(postcode: str) -> str:
    """
    Проверяет, является ли переданный индекс британским или словацким.
    """
    return (re.search(r'^ *[a-zA-Z]{1,2}\d{1,2} \d[a-zA-Z]{2} *$', postcode) and 'GB') or (re.search(r'^ *\d{3} \d{2} *$', postcode) and 'SK') or "Not valid"


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(which_postcode, (
        ("DN1 1AA", "GB"),
        ("040 01", "SK"),
        ("070 08", "SK"),
        ("G4 7Ah  ", "GB"),
        ("  810 08", "SK"),
        ("G4  7AH", "Not valid"),
        ("12 8NU", "Not valid"),
        ("DN1 AAA", "Not valid"),
        ("SE21 AA7", "Not valid"),
        ("SE217AA", "Not valid"),
        ("810  08", "Not valid"),
        ("40 01", "Not valid"),
        ("04001", "Not valid"),
    ))
