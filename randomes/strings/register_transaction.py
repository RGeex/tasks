"""
Учитывая числовой ввод, register_transactionследует отформатировать его как
строку, округленную до двух знаков после запятой, с запятой в качестве
разделителя тысяч, точкой в ​​качестве десятичного разделителя и знаком
доллара перед ним. (Используйте метод округления « округлить до половины »,
который является поведением по умолчанию round(в Python и Javascript).
Например, число 1000,557 должно отображаться как «$1,000.56».
Если входное значение меньше единицы, добавьте ноль в качестве начального
разряда для обозначения доллара. То есть, число 0,2 должно отображаться как «$0.20».

Но это ещё не всё! Как хищный букмекер на ипподроме, register_transaction
Функция должна вести текущий учёт каждой зарегистрированной транзакции.
После форматирования входных данных функция должна вывести упорядоченный
список (или массив) всех транзакций, когда-либо зарегистрированных функцией,
с новой транзакцией в конце списка.

Вы можете предположить, что все входные данные функции будут допустимыми
целыми числами или числами с плавающей точкой.

Пример:

register_transaction(15) -> ["$15.00"]
register_transaction(10) -> ["$15.00", "$10.00"]

"""
import typing
import unittest


def register_transaction(n: int | float, data: list = []) -> list[str]:
    """
    Разделяет число по 3 знака, а так же округляет его до 2-х знкаов
    после запятой, добавляя его в список памяти функции.
    """
    return data.append(f'${n:,.2f}') or data


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(register_transaction, (
        (1000, ["$1,000.00"]),
        (.55, ["$1,000.00", "$0.55"]),
        (.202, ["$1,000.00", "$0.55", "$0.20"]),
        (.555, ["$1,000.00", "$0.55", "$0.20", "$0.56"]),
    ))
