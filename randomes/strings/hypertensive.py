"""
В практических рекомендациях Международного общества гипертонии 2020 года
повышенное кровяное давление (гипертония) и его осложнения описываются как
основная причина смертности в мире на момент публикации. Кровяное давление
является мерой давления сердца на стенки кровеносных сосудов. Оно
регистрируется как превышение систолического давления над диастолическим
давлением (например, «120/80 мм рт. ст.»), которое представляет собой
максимальное и минимальное давление в сосудах между ударами сердца.

Для целей этого ката гипертонию можно диагностировать, когда артериальное
давление пациента соответствует любому из трех критериев, перечисленных ниже:

    Среднее значение всех измеренных систолических давлений >= 140 мм рт. ст.
    Должно быть минимум 2 измерения.
    Среднее значение всех измеренных диастолических давлений >= 90 мм рт. ст.
    Должно быть минимум 2 измерения.
    Любое измерение с систолическим давлением >= 180 мм рт. ст. И
    диастолическим давлением >= 110 мм рт. ст.

Вам дан список пациентов , в котором каждый элемент представляет пациента.
Каждый пациент/элемент состоит из списка строк (представляющих все измерения
артериального давления пациента) в формате «s/d», где s — систолическое давление,
а d — диастолическое, оба в мм рт. ст. Систолическое и диастолическое число всегда
будет целым числом.

Возвращает количество пациентов, соответствующих любому из приведенных выше
определений гипертонии.

Пример:

Input:
[
["130/90","140/94"],
["160/110"],
["200/120"],
["150/94","140/90","120/90"],
["140/94","140/90","120/80","130/84"]
]

Output:
3

# patients at index 0, 2, and 3 are hypertensive

Ограничения: 0 < длина списка пациентов <= 10000

0 < длина элемента внутри пациентов <= 30
"""


def hypertensive(patients: list[list[str]]) -> int:
    """
    Подсчитывает кол-во поциентов с гипертонией, определяемой по заданным критериям.
    """
    res = 0
    for arr in patients:
        tmp = [[0, 0], 0]
        for x in arr:
            for i, n in enumerate(x.split('/')):
                tmp[0][i], tmp[1] = tmp[0][i] + int(n), [2, [0, tmp[1]][i] + ([180, 110][i] <= int(n))][tmp[1] != 2]
        res += tmp[1] == 2 or 1 < len(arr) and any([140, 90][i] <= x // len(arr) for i, x in enumerate(tmp[0]))
    return res


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([["130/80","140/94"],["160/110"],["150/80"],["150/92","140/90","138/84"],["140/94","140/90","120/80"]], 1),
        ([["130/90","140/94"],["160/110"],["150/80"],["150/92","140/90","120/80"],["140/94","140/90","120/80"]], 1),
        ([["130/90","140/84"],["160/110"],["200/120"],["150/92","140/90","120/80"],["140/94","140/90","120/80"]], 1),
        ([["130/90","140/94"],["160/110"],["200/120"],["150/94","140/90","120/90"],["140/94","140/90","120/80"]], 3),
    )
    for key, val in data:
        assert hypertensive(key) == val


if __name__ == '__main__':
    test()
