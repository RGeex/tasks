"""
инструкции:
Напишите функцию, которая принимает в качестве параметра число,
представляющее размеры флага. Флаги всегда будут квадратными,
поэтому число 9 означает, что вы должны сделать флаг размером 9x9.
Он должен вернуть строку флага с «X» для красных/белых линий
и «-» для синего фона . Он должен включать символы новой строки,
чтобы не все было в одной строке.
Ради симметрии относитесь к нечетным и четным числам по-разному:
флаги с нечетными числами должны иметь центральный крест толщиной
всего в один «X» . Флаги с четными числами должны иметь центральный
крест толщиной в два крестика (см. примеры ниже).

Другие пункты:
Самый маленький флаг, который вы можете сделать так, чтобы он не
выглядел глупо, — 7x7. Если вы получили число меньше 7, просто
сделайте флаг 7x7 .
Если вы получили десятичную дробь, округлите ее до следующего
целого числа , например, 12,45 будет означать создание флага
размером 13x13.
Если вы получили что-то, что вовсе не является числом, верните false .
"""

import math


def union_jack(n: int | float) -> str | bool:
    """
    Создает узор в виде флага Британии.
    """
    if type(n) in (int, float):
        n = math.ceil(n) if n > 6 else 7
        m = n // 2 + n % 2
        res = []
        for i in range(m):
            line = []
            for j in range(m):
                line.append(['-', 'X'][i == j or j == m - 1 or i == m - 1])
            res.append(''.join(line + line[m - (n % 2 + 1)::-1]))
        return '\n'.join(res + res[m - (n % 2 + 1)::-1])
    return False


def test() -> None:
    """Тестирование работы алгоритмов."""

    data = (
        (2, '\n'.join([
            'X--X--X',
            '-X-X-X-',
            '--XXX--',
            'XXXXXXX',
            '--XXX--',
            '-X-X-X-',
            'X--X--X',
        ])),
        (8, '\n'.join([
            'X--XX--X',
            '-X-XX-X-',
            '--XXXX--',
            'XXXXXXXX',
            'XXXXXXXX',
            '--XXXX--',
            '-X-XX-X-',
            'X--XX--X',
        ])),
    )

    for key, val in data:
        assert union_jack(key) == val


if __name__ == '__main__':
    test()
