"""
Мы ищем неотрицательные целые числа, содержащие не более 3 цифр, например, сумма кубов их цифр является самим числом; мы будем называть их «кубическими» числами.

153 is such a "cubic" number : 1^3 + 5^3 + 3^3 = 153

Эти «кубические» числа, состоящие не более чем из 3 цифр, легко найти даже вручную, поэтому они «спрятаны» среди других чисел и символов в строке.

Задача состоит в том, чтобы найти или нет «кубические» числа в строке,
а затем составить сумму этих «кубических» чисел, найденных в строке,
если таковые имеются, и вернуть строку, например:

"number1 number2 (and so on if necessary) sumOfCubicNumbers Lucky"

если были найдены «кубические» числа номер1, номер2,....

Числа в выходных данных должны располагаться в том порядке, в котором они
встречаются во входной строке.

Если кубические числа не найдены, верните строку: `"Unlucky"``.
Примеры:

 - s = "aqdf&0#1xyz!22[153(777.777" 
   the groups of at most 3 digits are 0 and 1 (one digit), 22 (two digits),
   153, 777, 777 (3 digits)
   Only 0, 1, 153 are cubic and their sum is 154
   Return: "0 1 153 154 Lucky"

- s = "QK29a45[&erui9026315"
  the groups are 29, 45, 902, 631, 5. None is cubic.
  Return: "Unlucky"

Примечания

    В строке «001234», где следуют друг за другом 3 или более цифр, первой
    группой для проверки является «001», а следующей — «234». Если был взят
    пакет, состоящий не более чем из трех цифр, независимо от того,
    «кубический» он или нет, для этого пакета все закончено.

    Когда непрерывная строка цифр превышает 3, строка разбивается на группы по
    3 слева. Последняя группа может состоять из 3, 2 или 1 цифры.

    например, «24172410» становится 3 строками, содержащими «241», «724» и «10».

    например, «0785» становится двумя строками, содержащими «078» и «5».
"""


import re


def is_sum_of_cubes(s: str) -> str:
    """
    Поиск в строке 1-3 значных чисел сумма кубов которых равна самому числу.
    """
    x = [num for num in re.findall(r'\d{1,3}', s) if sum(int(n) ** 3 for n in num) == int(num)]
    return [' '.join(x + [str(sum(map(int, x)))] + ['Lucky']), 'Unlucky'][not x]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("&z _upon 407298a --- ???ry, ww/100 I thought, 631str*ng and w===y -721&()", "407 407 Lucky"),
        ("No numbers!", "Unlucky"),
    )
    for key, val in data:
        assert is_sum_of_cubes(key) == val


if __name__ == '__main__':
    test()
