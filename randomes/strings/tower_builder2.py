"""
Построить башню продвинутого уровня

Постройте Башню, используя следующие аргументы:

    количество этажей (целое и всегда больше 0)
    размер блока (ширина, высота) (пара целых чисел и всегда больше (0, 0))

Блок башенного типа представлен как *. Башни размером блока (2, 1) и (2, 3) будут выглядеть соответственно:

  **

  **
  **
  **

например, башня в 3 этажа с размером блока = (2, 3) выглядит как ниже

[
  '    **    ',
  '    **    ',
  '    **    ',
  '  ******  ',
  '  ******  ',
  '  ******  ',
  '**********',
  '**********',
  '**********'
]

а башня в 6 этажей с размером блока = (2, 1) выглядит как ниже

[
  '          **          ', 
  '        ******        ', 
  '      **********      ', 
  '    **************    ', 
  '  ******************  ', 
  '**********************'
]

Не возвращайте целую строку, содержащую окончания строк, а вместо этого возвращайте список/массив/вектор строк! 
"""


def tower_builder(n: int, x: tuple[int]) -> list[str]:
    """
    Строит башню по заданнм параметрам.
    """
    return [x for s in [[f"{'*'*(x[0]*i*2-x[0]):^{x[0]*n*2-x[0]}}"] * x[1] for i in range(n, 0, -1)] for x in s][::-1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((1, (1, 1)), ['*', ]),
        ((3, (4, 2)), ['        ****        ', '        ****        ', '    ************    ', '    ************    ', '********************', '********************']),
    )
    for key, val in data:
        assert tower_builder(*key) == val


if __name__ == '__main__':
    test()
