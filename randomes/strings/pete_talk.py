"""
Наш дружелюбный друг Пит действительно хороший человек, но он имеет тенденцию
быть довольно... неуместным.

И возможно громко, если дать достаточно этанола и свободы действий, поэтому мы
просим вас написать функцию, которая должна брать свою не всегда «чистую» речь
и покрывать как можно больше ее, чтобы не обидеть более здравомыслящих духов.

Например, учитывая ввод типа

What the hell am I doing here? And where is my wallet? PETE SMASH!

Ожидается, что вы превратите его во что-то вроде:

W**t t*e h**l am i d***g h**e? A*d w***e is my w****t? P**e s***h!

Если вы еще не разобрались с правилами: любые слова длиной более 2 символов
должны быть заменены «внутри» (то есть каждый символ, который не является
первым или последним) на *; поскольку мы не хотим, чтобы Пит слишком много
кричал, каждую заглавную букву, которая не находится в начале строки или не
идет после знака препинания среди [".","!","?"] необходимо перевести в нижний
регистр; пробелы и другие знаки препинания можно игнорировать.

И наоборот, вы должны быть уверены, что в начале каждого предложения есть
слово, написанное с заглавной буквы. Предложения разделяются вышеупомянутыми
знаками препинания.

Наконец, функция будет принимать дополнительный параметр, состоящий из
массива/списка разрешенных слов (в верхнем или нижнем регистре), которые не
подлежат замене (совпадение должно быть нечувствительно к регистру).

Дополнительные файлы cookie, если вы можете сделать все это каким-то
эффективным способом и/или использовать наши дорогие регулярные выражения;)
"""


def pete_talk(s: str, ok: list[str] | None = None) -> str:
    """
    Заменяет буквы внутри слов *, кроме слов указанных в списке,
    а так же устанавливает правильный регистр предложений.
    """
    res, cap, ok = [], True, ok and [word.lower() for word in ok] or []
    for word in s.lower().split():
        i = next((i for i, x in enumerate(word) if not x.isalpha()), len(word))
        word, p = word[:i], word[i:]
        if 2 < len(word) and word not in ok:
            word = f'{"*" * len(word[1:-1])}'.join(word[::len(word) - 1])
        res.append([word.capitalize(), word][not cap] + p)
        cap = p and p in '?!.'
    return ' '.join(res)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("I want to punch someone in the face",),"I w**t to p***h s*****e in t*e f**e"),
        (("uh!",),"Uh!"),
        (("What the hell am I doing here? And where is my wallet? PETE SMASH!",),"W**t t*e h**l am i d***g h**e? A*d w***e is my w****t? P**e s***h!"),
        (("I want to punch someone in the face",["someone","face"]),"I w**t to p***h someone in t*e face"),
        (("I want to punch someone in the face",["drink","job","girls"]),"I w**t to p***h s*****e in t*e f**e"),
    )
    for key, val in data:
        assert pete_talk(*key) == val


if __name__ == '__main__':
    test()
