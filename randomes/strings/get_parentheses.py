"""
В этом ката вам будет предоставлена ​​строка со скобками и индекс открывающей
скобки, и вашей задачей будет вернуть индекс соответствующей закрывающей
скобки. И входной, и возвращаемый индекс отсчитываются от 0, за исключением
Фортрана, где он отсчитывается от 1 . Открывающая скобка всегда будет иметь
закрывающую скобку. Возвращаться -1 если ответа нет (в Haskell верните Nothing;
в Фортране верните 0; в Go вернуть ошибку)
Примеры

solve("((1)23(45))(aB)", 0) = 10 -- the opening brace at index 0 matches the
closing brace at index 10
solve("((1)23(45))(aB)", 1) = 3 
solve("((1)23(45))(aB)", 2) = -1 -- there is no opening bracket at index 2,
so return -1
solve("((1)23(45))(aB)", 6) = 9
solve("((1)23(45))(aB)", 11) = 14
solve("((>)|?(*'))(yZ)", 11) = 14

Ввод будет состоять из букв, цифр и специальных символов, но без пробелов.
Единственные скобки будут ( и ).

Больше примеров в тестовых примерах.
"""


def get_parentheses(s: str, idx: int) -> int:
    """
    Поиск закрывающей скобки для указанного индекса открывающей.
    """
    n, tmp, res = 0, {}, {}
    for i, x in enumerate(s):
        n += [tmp, res][x == ')'].update({tmp[n] if x == ')' else n + 1: i}) or [1, -1][x == ')'] if x in '()' else 0
    return res.get(idx, -1)
           

def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("((1)23(45))(aB)",0),10),
        (("((1)23(45))(aB)",1),3),
        (("((1)23(45))(aB)",2),-1),
        (("((1)23(45))(aB)",6),9),
        (("((1)23(45))(aB)",11),14),
        (("(g(At)IO(f)(tM(qk)YF(n)Nr(E)))",11),28),
        (("(g(At)IO(f)(tM(qk)YF(n)Nr(E)))",0),29),
        (("(>_(va)`?(h)C(as)(x(hD)P|(fg)))",19),22),
    )
    for key, val in data:
        assert get_parentheses(*key) == val


if __name__ == '__main__':
    test()
