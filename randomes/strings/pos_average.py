"""
Предположим, у вас есть 4 числа: 0, 9, 6, 4 и 3 струны, составленные из них:

s1 = "6900690040"
s2 = "4690606946"
s3 = "9990494604"

Сравнивать s1 и s2 чтобы увидеть, сколько позиций у них общих: 0 под индексом
3, 6 под индексом 4, 4 под индексом 8: 3 общие позиции из десяти.

Сравнивать s1 и s3 чтобы увидеть, сколько позиций у них общих: 9 по индексу
1, 0 под индексом 3, 9 под индексом 5: 3 общие позиции из десяти.

Сравнивать s2 и s3. Находим 2 общие позиции из десяти.

Итак, для трех строк у нас есть 8 общих позиций из 30, т.е. 0,2666... ​​или
26,666...%.

Данный n подстроки (n >= 2) в строке s наша функция pos_average рассчитает
средний процент одинаковых позиций между (n * (n-1)) / 2 наборы подстрок, взятые
среди заданных n подстроки. Может случиться так, что некоторые подстроки повторяются,
но поскольку их ранги не совпадают в s они рассматриваются как разные подстроки.

Функция возвращает процент в формате числа с плавающей запятой с 10 десятичными
знаками, но результат проверяется как 1e.-9 (см. функцию AssertFuzzy в тестах).
Пример:

Дана строка s = "444996, 699990, 666690, 096904, 600644, 640646, 606469, 409694,
666094, 606490" составление набора из n = 10 подстрок (следовательно, 45 комбинаций),
pos_average возвращает 29.2592592593.

В наборе n подстроки будут иметь одинаковую длину ( > 0 ). 
"""


from operator import eq
from itertools import combinations as cb, starmap as smap


def pos_average(s: str) -> float:
    """
    Вычисляет % совпадений значений строки.
    """
    m = list(cb((n := s.split(', ')), 2))
    return round(sum(sum(smap(eq, x)) for x in smap(zip, m)) / (len(m) * len(n[0])) * 100, 10)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("466960, 069060, 494940, 060069, 060090, 640009, 496464, 606900, 004000, 944096", 26.6666666667),
        ("444996, 699990, 666690, 096904, 600644, 640646, 606469, 409694, 666094, 606490", 29.2592592593),
        ("449404, 099090, 600999, 694460, 996066, 906406, 644994, 699094, 064990, 696046", 24.4444444444),
        ("660999, 969060, 044604, 009494, 609009, 640090, 994446, 949940, 046999, 609444", 22.9629629630),
        ("996060, 606494, 964494, 460409, 609449, 969600, 960944, 960006, 666049, 090996", 24.8148148148),
        ("40664064, 60460960, 00669664, 94040464, 04006499, 00466666, 90966460, 64494990", 29.0178571429),
        ("64040600, 64464440, 60006040, 49609906, 46664409, 99464446, 90446964, 96940090", 20.5357142857),
        ("99494909, 60004094, 60090496, 64664669, 49909604, 49999064, 46009964, 44494444", 25.4464285714),
        ("46904946, 60996660, 64040460, 40449469, 46440460, 96090699, 06600440, 44046966", 27.6785714286),
        ("46099969, 64096999, 44949949, 06409969, 09064604, 90490494, 04600696, 94469969", 25.8928571429),
        ("4444444, 4444444, 4444444, 4444444, 4444444, 4444444, 4444444, 4444444", 100),
        ("0, 0, 0, 0, 0, 0, 0, 0", 100),
        ("0, 0, 1", 33.3333333333),
    )
    for key, val in data:
        assert pos_average(key) == val


if __name__ == '__main__':
    test()
