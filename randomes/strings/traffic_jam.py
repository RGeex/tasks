"""
Описание

У светофора выстроилась группа автомобилей, каждый с разной скоростью.
Зная продолжительность зелёного сигнала, рассчитайте минимальное количество
циклов зелёного сигнала, необходимое для того, чтобы все автомобили проехали светофор.
Правила

    Автомобили выстраиваются в очередь друг за другом и пересекают перекресток
    в том порядке, в котором они стоят в очереди, начиная с правой стороны списка.

    В течение одного цикла зеленого сигнала светофора может проехать несколько
    автомобилей, при условии, что общее время проезда не превышает
    продолжительности действия зеленого сигнала.

    Каждый цикл зеленого сигнала светофора начинается с оставшихся автомобилей,
    и процесс повторяется до тех пор, пока не останется ни одного автомобиля.

Ввод/вывод

Ваша функция получит:

    Список целых чисел — время, необходимое каждому автомобилю для проезда светофора.

        Затраченное время всегда будет больше 0.

        Этот список транспортных средств не будет пустым

    Целое число - длительность зеленого сигнала светофора
        Продолжительность зеленого сигнала светофора всегда больше или равна
        времени движения каждого отдельного транспортного средства.

Ваша функция должна возвращать:

    Целое число — количество циклов зеленого сигнала светофора, необходимых
    для проезда всех автомобилей.

Пример

([15, 2, 8, 7], 16) -> answer: 3

Первые две машины (со скоростью 7 и 8соответственно) успевают проехать
светофор вместе (как 7 + 8 = 15, что меньше продолжительности зеленого сигнала светофора).

Затем автомобиль со скоростью 2может проехать, но следующая машина, которая
имеет скорость 15не может пройти и должен ждать еще один цикл.

    Выход: 3(Необходимо минимум 3 цикла зеленого света)
"""
import typing
import unittest


def traffic_jam(traffic: list[int], green_light_duration: int) -> int:
    """
    Определяет, сколько необходимо циклов зеленого сигнала светофора,
    что бы проехать всем машинам.
    """
    res, tmp = 1, 0
    for n in traffic[::-1]:
        if tmp + n > green_light_duration:
            res, tmp = res + 1, 0
        tmp += n
    return res


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(*key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(traffic_jam, (
        (([15, 2, 8, 7], 16), 3),
        (([12, 5, 8, 1], 16), 2),
        (([5, 5, 2, 4], 5), 4),
    ))
