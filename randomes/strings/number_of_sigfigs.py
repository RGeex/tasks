"""
Вызов

Напишите функцию, которая возвращает количество значащих цифр в заданном числе. Подробнее о значащих цифрах можно прочитать ниже.
Полезная информация

    тип данного числа будет строковым
    вы должны вернуть количество значащих цифр как тип int
    пустые строки не будут предоставлены

Значимые фигуры
Кто они такие?

Значащие цифры — это значимые цифры в измеренной или вычисленной величине.
Подсчет значимых цифр
Все цифры, отличные от нуля, являются значимыми.

    Число 4,357 имеет 4 значащие цифры.
    152.63 имеет 5 значащих цифр

Нули в начале числа не имеют значения .

    0215 имеет 3 значащие цифры
    0,6 имеет 1 значащую цифру

Нули в конце числа с десятичной точкой имеют значение.

    78.200 имеет 5 значащих цифр
    Число 20.0 имеет 3 значащие цифры

Нули в конце числа без десятичной точки не имеют значения.

    1200 имеет 2 значащие цифры
    345000 имеет 3 значащие цифры

Все нули между значащими цифрами являются значимыми.

    90.09 имеет 4 значащие цифры
    5050 имеет 3 значащие цифры


"""
import typing
import unittest


def number_of_sigfigs(number: str) -> int:
    """
    Подсчитывает кол-во значимых фигур, по заданному условию.
    """
    return len([number.strip('0'), number.replace('.', '').lstrip('0') or '1']['.' in number])


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(number_of_sigfigs, (
        ("1", 1),
        ("0003", 1),
        ("3000", 1),
        ("404", 3),
        ("050030210", 7),
        ("0.1", 1),
        ("0.0", 1),
        ("0.01", 1),
        ("0.010", 2),
    ))
