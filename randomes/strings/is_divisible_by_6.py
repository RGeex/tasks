"""
Задача

Маскированное число — это строка, состоящая из цифр и одной звездочки ( *),
который следует заменить ровно одной цифрой. Учитывая замаскированный номер s,
найдите все возможные варианты замены звездочки цифрой для получения целого числа,
делящегося на 6.

Ввод/вывод
[input] нить s
Замаскированный номер.
1 ≤ inputString.length ≤ 10000.

[output] строковый массив
Отсортированный массив строк, представляющий все неотрицательные целые числа,
соответствующие заданной маске и кратные 6.

Пример
Для s = "1*0", вывод должен быть ["120", "150", "180"].
Для s = "*1", вывод должен быть [].
Для s = "1234567890123456789012345678*0",

вывод должен быть
[
"123456789012345678901234567800",
"123456789012345678901234567830",
"123456789012345678901234567860",
"123456789012345678901234567890"]```
As you can see, the masked number may be very large ;-)
"""


__import__('sys').set_int_max_str_digits(0)


def is_divisible_by_6(s: str) -> list[str]:
    """
    Поиск всех возможных вариантов замены * на цифру, что бы число делилось на 6.
    """
    return [str(x) for i in range(10) if not (x := int(s.replace('*', str(i)))) % 6]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("1*0",["120","150","180"]),
        ("*",["0","6"]),
        ("*1",[]),
        ("*2",["12", "42", "72"]),
        ("81234567890*",["812345678904"]),
        ("41*",["414"]),
        ("*6",["6", "36", "66", "96"]),
        ("2345*345729",[]),
        ("34234*2",["3423402","3423432","3423462","3423492"]),
        ("1234567890123456789012345678*0",["123456789012345678901234567800", "123456789012345678901234567830", "123456789012345678901234567860", "123456789012345678901234567890"]),
    )
    for key, val in data:
        assert is_divisible_by_6(key) == val


if __name__ == '__main__':
    test()
