"""
Задача

Маскированное число — это строка, состоящая из цифр и одной звездочки ( *),
который следует заменить ровно одной цифрой. Учитывая замаскированный номер s,
найдите все возможные варианты замены звездочки цифрой для получения целого числа,
делящегося на 6.

Ввод/вывод
[input] нить s
Замаскированный номер.
1 ≤ inputString.length ≤ 10000.

[output] строковый массив
Отсортированный массив строк, представляющий все неотрицательные целые числа,
соответствующие заданной маске и кратные 6.

Пример
Для s = "1*0", вывод должен быть ["120", "150", "180"].
Для s = "*1", вывод должен быть [].
Для s = "1234567890123456789012345678*0",

вывод должен быть
[
"123456789012345678901234567800",
"123456789012345678901234567830",
"123456789012345678901234567860",
"123456789012345678901234567890"]```
As you can see, the masked number may be very large ;-)
"""


__import__('sys').set_int_max_str_digits(0)


def is_divisible_by_6(s: str) -> list[str]:
    """
    Поиск всех возможных вариантов замены * на цифру, что бы число делилось на 6.
    (для одной замены)
    """
    return [x for i in range(10) if not int(x := s.replace('*', str(i))) % 6]


def is_divisible_by_6_more(s: str, n=0) -> list[str]:
    """
    Поиск всех возможных вариантов замены * на цифру, что бы число делилось на 6.
    (для нескольких замен)
    """
    return [(x := ' '.join([x for i in range(10) if '*' in (x := s.replace('*', str(i), 1)) and (x := is_divisible_by_6_more(x, n+1)) or x and not int(x) % 6])), x.split()][not n]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("1*0",["120","150","180"]),
        ("*",["0","6"]),
        ("*1",[]),
        ("*2",["12", "42", "72"]),
        ("81234567890*",["812345678904"]),
        ("41*",["414"]),
        ("*6",["06", "36", "66", "96"]),
        ("2345*345729",[]),
        ("34234*2",["3423402","3423432","3423462","3423492"]),
        ("1234567890123456789012345678*0",["123456789012345678901234567800", "123456789012345678901234567830", "123456789012345678901234567860", "123456789012345678901234567890"]),
    )
    for key, val in data:
        assert is_divisible_by_6(key) == val
        assert is_divisible_by_6_more(key) == val


    data = (
        ("*2",["12", "42", "72"]),
        ("*21",[]),
        ("**1",[]),
        ("*2*",["024", "120", "126", "222", "228", "324", "420", "426", "522", "528", "624", "720", "726", "822", "828", "924"]),
        ("***",["000", "006", "012", "018", "024", "030", "036", "042", "048", "054", "060", "066", "072", "078", "084", "090", "096", "102", "108", "114", "120", "126", "132", "138", "144", "150", "156", "162", "168", "174", "180", "186", "192", "198", "204", "210", "216", "222", "228", "234", "240", "246", "252", "258", "264", "270", "276", "282", "288", "294", "300", "306", "312", "318", "324", "330", "336", "342", "348", "354", "360", "366", "372", "378", "384", "390", "396", "402", "408", "414", "420", "426", "432", "438", "444", "450", "456", "462", "468", "474", "480", "486", "492", "498", "504", "510", "516", "522", "528", "534", "540", "546", "552", "558", "564", "570", "576", "582", "588", "594", "600", "606", "612", "618", "624", "630", "636", "642", "648", "654", "660", "666", "672", "678", "684", "690", "696", "702", "708", "714", "720", "726", "732", "738", "744", "750", "756", "762", "768", "774", "780", "786", "792", "798", "804", "810", "816", "822", "828", "834", "840", "846", "852", "858", "864", "870", "876", "882", "888", "894", "900", "906", "912", "918", "924", "930", "936", "942", "948", "954", "960", "966", "972", "978", "984", "990", "996"]),
    )
    for key, val in data:
        assert is_divisible_by_6_more(key) == val


if __name__ == '__main__':
    test()
