"""
Безумие мистера Понга

Пока миссис Понг уехала в гости к своей сестре, мистер Понг по глупости установил стол для
пинг-понга в своей гостиной и приглашает своего соседа мистера Пинга на дружескую игру в
пинг-понг.

Когда мистер Пинг ударяет по мячу для пинг-понга, мячик для пинг-понга летит. ping.

Когда мистер Понг ударяет по мячу для пинг-понга, мячик для пинг-понга улетает. pong.

К сожалению, не каждое попадание попадает туда, куда было задумано...

Иногда мячик для пинг-понга попадает в сетку, отскакивает от стены или рикошетит от довольно
дорогой коллекции фарфора миссис Понг, светильника или различных предметов мебели для отдыха,
прежде чем, наконец, остановиться на полу. Когда это происходит, возникают всевозможные
неприятные звуки.
Пример

Типичный митинг может звучать так:

ping- pong- ping- pong- ping- pong- ping- pong- dong- tang- bing- tink- donk- donk- donk

    Мистер Пин служил
    Было несколько хороших возвратов
    Мистер Понг нанес неудачный удар, в результате чего сломалась ручка второй любимой чашки его
    жены. Упс.

Задача сказала

Кто набрал больше всего очков?
Вход

Звуки одного или нескольких митингов.
Выход

Имя победившего игрока: pingили pong
Примечания

    Чтобы набрать очко, один и тот же игрок должен одновременно подать и выиграть розыгрыш.
    Следующим подается тот, кто подберет мяч с пола. Это случайно.
    Плохой шум – это нечто иное, чем pingили pong.
    Плохой шум означает, что тот, кто последним ударил по мячу, нанес неудачный удар.
    По какой-то неизвестной причине все шумы состоят из 4 строчных букв и разделяются знаком -
    Если счет равен, то победителем считается игрок, НЕ сделавший последний неудачный бросок.
    Двойных ударов не бывает.
    Финальный розыгрыш всегда заканчивается тем, что мяч оказывается на полу.
    Все введенные данные действительны.
"""


def ping_pong(sounds: str) -> str:
    """
    Определяет победителя игры в пинг-понг.
    """
    p, c, f = dict.fromkeys(('ping', 'pong'), 0), None, None
    for x in sounds.split('-'):
        if c and x not in p:
            f = c
        if c and x in p:
            p[c] += 1
        c = [None, x][x in p]
    if len(set(p.values())) == 1:
        p.pop(f)
    return max(p.items(), key=lambda x: x[1])[0]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("ping-thud", "pong"),
        ("pong-ping-pong-donk-pong-ping-pong-donk-pong-ping-pong-doof-pong-ping-donk", "pong"),
        ("ping-pong-bink-pong-ping-donk", "pong"),
        ("ping-pong-ping-pong-bonk-bing-doof", "ping"),
        ("pong-ping-dong-ping-pong-tink-bonk-pong-ping-doof", "pong"),
        ("pong-ping-bink-ping-pong-donk", "ping"),
    )
    for key, val in data:
        assert ping_pong(key) == val


if __name__ == '__main__':
    test()
