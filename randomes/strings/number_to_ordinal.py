"""
Завершить функцию numberToOrdinal, который должен принимать число и возвращать
его в виде строки с правильным суффиксом порядкового индикатора
(на английском языке). То есть:

    numberToOrdinal(1) ==> '1st'
    numberToOrdinal(2) ==> '2nd'
    numberToOrdinal(3) ==> '3rd'
    numberToOrdinal(4) ==> '4th'
    ... and so on

Для целей этого ката вы можете предположить, что функции всегда будет
передаваться неотрицательное целое число. Если функции передан 0 в качестве
аргумента, она должна вернуть «0» (в виде строки).

Чтобы помочь вам начать, вот выдержка со страницы Википедии, посвящённой
порядковым индикаторам :

    st используется с числами, оканчивающимися на 1 (например, 1-й,
    произносится первым)
    nd используется с числами, оканчивающимися на 2 (например, 92-й,
    произносится как девяносто второй)
    rd используется с числами, оканчивающимися на 3 (например, 33-й,
    произносится как тридцать третий).
    В качестве исключения из приведенных выше правил во всех «подростковых»
    числах, оканчивающихся на 11, 12 или 13, используется -th (например, 11-й,
    произносится как одиннадцатый, 112-й, произносится как сто [и] двенадцатый)
    th используется для всех остальных чисел (например, 9-й, произносится как
    девятый).
"""


def number_to_ordinal(n: int) -> str:
    """
    Добавляет к числу правильный суффикс.
    """
    x = dict(enumerate(f'th st nd rd{" th" * 10}'.split()))
    return f'{n}{x.get(n % 100, x[n % 10]) if n else ""}'


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (1, '1st'),
        (2, '2nd'),
        (3, '3rd'),
        (4, '4th'),
    )
    for key, val in data:
        assert number_to_ordinal(key) == val


if __name__ == '__main__':
    test()
