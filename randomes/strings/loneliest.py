"""
Завершите функцию, которая принимает строку и возвращает массив символов,
имеющих наибольшее количество пробелов справа и слева.

Примечания:

    строка может иметь начальные/конечные пробелы — не следует считать их
    строки содержат только уникальные символы из a к z
    порядок символов в возвращаемом массиве не имеет значения

Примеры

"a b  c"                        -->  ["b"]
"a bcs           d k"           -->  ["d"]
"    a b  sc     p     t   k"   -->  ["p"]
"a  b  c  de"                   -->  ["b", "c"]
"     a  b  c de        "       -->  ["b"]
"abc"                           -->  ["a", "b", "c"]
"""


import re


def loneliest(s: str) -> list[str]:
    """
    Поиск букв в строке, которых окружает больше пробелов.
    """
    res, tmp = {}, re.split(r'(\w)', s.strip())
    for i in range(0, len(tmp) - 1, 2):
        n = len(''.join(tmp[i:i+3:2]))
        res[n] = res.get(n, []) + [tmp[i+1]]
    return max(res.items())[1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('a', ['a']),
        ('abc d   ef  g   h i j      ', ['g']),
        ('a   b   c ', ['b']),
        ('  abc  d  z    f gk s ', ['z']),
        ('a  b  c  de  ', ['b', 'c']),
        ('abc', ['a', 'b', 'c']),
    )
    for key, val in data:
        assert loneliest(key) == val


if __name__ == '__main__':
    test()
