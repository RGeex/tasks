"""
Чтобы доказать свой успех и получить финансирование, дикому зоопарку
необходимо доказать экологам, что в нем имеется x спаривающихся пар
медведей.
Задача:

Вы должны проверить строку(и), чтобы найти все спаривающиеся пары,
возвращая список/массив строки, содержащей допустимые спаривающиеся
пары, и логическое значение, указывающее, больше или равно общее
количество медведей x.
Правила для «действительной» спаривающейся пары:

    Медведи бывают либо «Б» (самец), либо «8» (самка).
    Медведи должны быть вместе в парах самец/самка «В8» или «8В».
    В спаривающихся парах должны участвовать по два разных медведя
    («B8B» может выглядеть забавно, но не считается двумя парами).

Возвращает массив, содержащий строку допустимых доступных пар спаривания
(пустую строку, если пар нет), а также логическое значение, указывающее,
общее больше или равно количество медведей x. , например:

(6, 'EvHB8KN8ik8BiyxfeyKBmiCMj') ---> ['B88B', false]; в этом примере
количество медведей (= 4) меньше заданного значения x (= 6)
"""


import re


def bears(x: int, s: str) -> list[str, bool]:
    """
    Поиск всех пар медведей, а так же проверка наличия указанного их кол-ва.
    """
    return [n := ''.join(re.findall(r'B8|8B', s)), x <= len(n)]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((7, '8j8mBliB8gimjB8B8jlB'), ["B8B8B8", False]),
        ((3, '88Bifk8hB8BB8BBBB888chl8BhBfd'), ["8BB8B8B88B", True]),
        ((8, '8'), ["", False]),
        ((1, 'j8BmB88B88gkBBlf8hg8888lbe88'), ["8BB88B", True]),
        ((0, '8j888aam'), ["", True]),
    )
    for key, val in data:
        assert bears(*key) == val


if __name__ == '__main__':
    test()
