"""
Дана строка ( str), содержащий целое число по основанию 10 между 0 и 10000,
преобразуйте целое число в его двоичное представление. В этот момент получите
подсчет максимального количества последовательных нулей. Оттуда верните счет
в письменном виде с большой буквы.

max_consec_zeros("9") => "Two"
max_consec_zeros("13") => "One"
max_consec_zeros("15") => "Zero"
max_consec_zeros("42") => "One"
max_consec_zeros("550") => "Three"

В самом первом примере у нас есть аргумент "9" который передается методу.
Бинарное представление 9 является 1001 который можно прочитать как: один,
ноль, ноль, один. Имеется не более двух последовательных нулей, что дает
целое число 2 как значение счетчика. Вывод в блоке кода выше отражает
последний шаг принятия 2 от стандартной формы к письменной форме "Two"
как было предложено.

В самом последнем примере у нас есть аргумент "550" который передается методу.
Бинарное представление 550 является 1000100110 который можно прочитать как: один,
ноль, ноль, ноль, один, ноль, ноль, один, один, ноль. Имеется не более трех
последовательных нулей, что дает целое число 3 как значение счетчика. Вывод в
блоке кода выше отражает последний шаг принятия 3 от стандартной формы к
письменной форме "Three" как было предложено.

Один из многих способов визуализировать конец каждого шага может выглядеть так:

max_consec_zeros("777")
1: "777"
2: 777
3: 1100001001
4: 4
5: "Four"
max_consec_zeros("777") => "Four"
"""


from itertools import groupby as gb


def max_consec_zeros_1(s: str) -> str:
    """
    Подсчитывает мак кол-во 0-й идущих подряд в заданном числе и выводит значение в виде слова.
    """
    x = dict(enumerate('Zero One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen'.split()))
    return x[max([len(list(b)) for a, b in gb(f'{int(s):b}') if not int(a)] + [0])]


def max_consec_zeros_2(s: str) -> str:
    """
    Подсчитывает мак кол-во 0-й идущих подряд в заданном числе и выводит значение в виде слова.
    """
    return 'Zero One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen'.split()[max(map(len, f'{int(s):b}'.split('1')))]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("7", "Zero"),
        ("33", "Four"),
        ("77", "Two"),
        ("100", "Two"),
        ("105", "Two"),
        ("113", "Three"),
        ("160", "Five"),
        ("180", "Two"),
        ("223", "One"),
        ("256", "Eight"),
        ("777", "Four"),
        ("992", "Five"),
        ("1024", "Ten"),
        ("1037", "Six"),
        ("1088", "Six"),
        ("2017", "Four"),
        ("2048", "Eleven"),
        ("3050", "One"),
        ("4096", "Twelve"),
        ("6144", "Eleven"),
        ("6656", "Nine"),
        ("7188", "Five"),
        ("8192", "Thirteen"),
        ("9999", "Four"),
        ("10000", "Four"),
    )
    for key, val in data:
        assert max_consec_zeros_1(key) == val
        assert max_consec_zeros_2(key) == val


if __name__ == '__main__':
    test()
