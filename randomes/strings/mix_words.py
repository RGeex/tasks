"""
Одно из первых писем, которые я когда-либо получал, было посвящено
предполагаемому исследованию Кембриджского университета, которое
предполагает, что ваш мозг может читать слова независимо от того,
в каком порядке они расположены, при условии, что первая и последняя
буквы каждого слова правильные.

Ваша задача — создать функцию, которая может брать любую строку и
случайным образом перемешивать буквы внутри каждого слова, оставляя
при этом первую и последнюю буквы слова на месте.

Например,

mixwords('Winter is coming') // returns 'Wntier is cminog' or 'Wtiner is conimg'
mixwords('Hey, friends!') // returns 'Hey, fierdns!' or 'Hey, fernids!'

    Все знаки препинания должны оставаться на своих местах
    Слова, состоящие менее 3 букв, не должны меняться.
    Буквы должны перемещаться случайным образом (поэтому вызов функции
    несколько раз с одной и той же строкой должен возвращать разные значения).
    Параметры, не являющиеся строками, должны возвращать неопределенное
    значение.

Тесты выполняют следующие действия, чтобы гарантировать возврат допустимой
строки:

    Убедитесь, что возвращаемая строка не равна переданной строке (возможно,
    вам придется повторно проверить решение, если ваша функция случайным
    образом возвращает ту же строку)
    Проверьте, чтобы первая и последняя буквы слов остались на своих местах.
    Проверьте, чтобы пунктуация осталась на месте
    Проверяет, что длина строки остается неизменной
    Проверяет возврат функции undefined для не строк
    Проверяет, что внутри слова (буквы между первой и последней) сохраняются
    те же буквы, хотя и в другом порядке.
    Проверяет, что буквы назначаются случайным образом.
"""


from random import shuffle


def mix_words(s: str) -> str:
    """
    Оставляет первую и последнюю буквы слова не тронутыми,
    а все между ними меняет местами случайным образом.
    """
    res = []
    for w in s.split():
        w, e = list(map(''.join, zip(*[[x, ''][::x.isalpha() or -1] for x in w])))
        if 2 < len(w):
            x = list(w[1:-1])
            shuffle(x)
            w = f'{"".join(x)}'.join(w[::len(w) - 1])
        res.append(w + e)
    return ' '.join(res)



def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    result = mix_words("hello")
    assert result != "hello"
    assert len(result) == 5
    assert result[0] == "h"
    assert result[4] == "o"
    assert "".join(sorted(result[1:4])) == "ell"

    data = (
        ("Hi","Hi"),
        ("Hi!","Hi!"),
        ("Hey","Hey"),
        ("Hey?","Hey?"),
    )
    for key, val in data:
        assert mix_words(key) == val


if __name__ == '__main__':
    test()
