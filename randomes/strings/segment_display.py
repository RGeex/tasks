"""
Семисегментный дисплей — это электронное устройство отображения, используемое
для отображения десятичных или шестнадцатеричных цифр. Он включает в себя
семь светодиодных сегментов, которые загораются в определенных комбинациях,
чтобы представить определенную цифру.


Вы должны принять целое число в диапазоне от 0 до 999999 и напечатать его в
виде строки (в десятичном формате), где каждая цифра представлена ​​в виде
собственного семисегментного дисплея (всего 6x семисегментных дисплеев).
Каждый из отдельных сегментов светодиодов на дисплее должен быть представлен
тремя решетками ###. Вертикальные полосы | (ASCII 124) представляют края
каждого дисплея с одним пробелом с каждой стороны между краем и областью
светодиодных сегментов. Пример ожидаемого результата показан ниже:

Для наглядности весь набор необходимых комбинаций приведен ниже:

|       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |  ###  |
|     # |     # |     # | #   # | #     | #     |     # | #   # | #   # | #   # |
|     # |     # |     # | #   # | #     | #     |     # | #   # | #   # | #   # |
|     # |     # |     # | #   # | #     | #     |     # | #   # | #   # | #   # |
|       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |       |
|     # | #     |     # |     # |     # | #   # |     # | #   # |     # | #   # |
|     # | #     |     # |     # |     # | #   # |     # | #   # |     # | #   # |
|     # | #     |     # |     # |     # | #   # |     # | #   # |     # | #   # |
|       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |

Если число меньше 6 цифр, результат должен быть выровнен по правому краю,
а неиспользуемые сегменты должны быть пустыми (поскольку они не включены).

Примечание. В конце любой строки не должно быть пробелов.
"""

from operator import eq


def segment_display(num: int) -> str:
    data = {
        '1': ['0', '01', '01', '01', '0', '01', '01', '01', '0'],
        '2': ['1', '01', '01', '01', '1', '10', '10', '10', '1'],
        '3': ['1', '01', '01', '01', '1', '01', '01', '01', '1'],
        '4': ['0', '11', '11', '11', '1', '01', '01', '01', '0'],
        '5': ['1', '10', '10', '10', '1', '01', '01', '01', '1'],
        '6': ['1', '10', '10', '10', '1', '11', '11', '11', '1'],
        '7': ['1', '01', '01', '01', '0', '01', '01', '01', '0'],
        '8': ['1', '11', '11', '11', '1', '11', '11', '11', '1'],
        '9': ['1', '11', '11', '11', '1', '01', '01', '01', '1'],
        '0': ['1', '11', '11', '11', '0', '11', '11', '11', '1'],
        'f': ['0', '0', '0', '0', '0', '0', '0', '0', '0'],
    }
    temp = {
        '0': '     ',
        '1': ' ### ',
        '01': '    #',
        '10': '#    ',
        '11': '#   #',
    }
    num = 'f'*(6-len(str(num))) + str(num)
    res = [[temp[x] for x in data.get(i, '')] for i in num]
    return ''.join(f"| {' | '.join(val)} |" + ('\n' if i else '') for i, val in enumerate(zip(*res), -8))


def test() -> None:
    """Тестирование работы алгоритмов."""
    data = (segment_display(123456),
            "|       |  ###  |  ###  |       |  ###  |  ###  |\n" +
            "|     # |     # |     # | #   # | #     | #     |\n" +
            "|     # |     # |     # | #   # | #     | #     |\n" +
            "|     # |     # |     # | #   # | #     | #     |\n" +
            "|       |  ###  |  ###  |  ###  |  ###  |  ###  |\n" +
            "|     # | #     |     # |     # |     # | #   # |\n" +
            "|     # | #     |     # |     # |     # | #   # |\n" +
            "|     # | #     |     # |     # |     # | #   # |\n" +
            "|       |  ###  |  ###  |       |  ###  |  ###  |")

    assert eq(*data)


if __name__ == '__main__':
    test()
