"""
Вам дана строка «elements» и целое число «n». Ваша задача — вернуть строку,
являющуюся палиндромом, используя элементы строки «elements» длиной «n».

Формат палиндромизации:

    Ваш палиндром начинается с первого элемента «элементов».
    После получения пары вы вставляете следующий элемент в «элементы» к
    палиндрому.
    Следующий элемент будет спарен внутри первой пары.
    Повторить
    Если вы достигли последнего элемента «элементов», повторите процесс с
    самого начала.

Случаи ошибок:
Если элементы строки пусты или n меньше 2, верните строку «Ошибка!»

Примеры:
<<<<<<< мое

For elements = "123" 
n = 2 => result = "11"
n = 3 => result = "121"
n = 4 => result = "1221"
n = 5 => result = "12321"
n = 6 => result = "123321"
n = 7 => result = "1231321"
n = 8 => result = "12311321"
n = 9 => result = "123121321"
n = 10=> result = "1231221321"

=======
"""


def palindromization(el: str, n: int) -> str:
    """
    Создает из строки палиндром указанной длины.
    """
    return el and 1 < n and (x := (el * sum(divmod((x := sum(divmod(n, 2))), len(el))))[:x]) + x[::-1][n % 2 or None:] or "Error!"


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("123",2), "11"),
        (("123",3), "121"),
        (("123",4), "1221"),
        (("123",5), "12321"),
        (("123",6), "123321"),
        (("123",7), "1231321"),
        (("123",8), "12311321"),
        (("123",9), "123121321"),
        (("123",10), "1231221321"),
        (("", 2), "Error!"),
        (("123", 1), "Error!"),
    )
    for key, val in data:
        assert palindromization(*key) == val


if __name__ == '__main__':
    test()
