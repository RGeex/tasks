"""
Шифрование чисел: cypher
Часть I Катас, шифрующих числа
Введение

В те времена, когда интернет только зарождался, большинство поисковых систем
просто искали ключевые слова в тексте, чтобы найти релевантные документы.
Хакеры не очень хотели, чтобы их информация отображалась на веб-сайтах, досках
объявлений, в группах новостей или где-либо ещё, поэтому они начали заменять
определённые буквы в словах. Всё началось с простых замен гласных, например,
на 4 вместо A или на 3 вместо E. Это означало, что такие темы, как взлом или
хакерство, оставались незамеченными.

Здесь мы будем использовать сокращенную версию алфавита Leet Speak , но более
подробную информацию вы можете найти здесь или в Википедии .
Задача

Вы получите строку, составленную из английских слов, string. Вам придется
вернуть зашифрованную версию этой строки.

Цифры, соответствующие каждой букве, представлены в таблице ниже. Обратите
внимание, что разные буквы могут иметь одинаковые цифры. В таких случаях одна
буква будет заглавной, а другая — строчной.


  
    
    	1 
    	2 
    	3 
    	4 
    	5 
    	6 
    	7 
    	8 
    	9 
    	0 
  

  
    Верхний регистр 
    	я 
    	Р 
    	И 
    	А 
    	С 
    	Г 
    	Т 
    	Б 
    	
    	ТО 
  

  
    Нижний регистр 
    	л 
    	С 
    	и 
    	а 
    	с 
    	б 
    	т 
    	
    	г 
    	то 
  

  


Любой символ, которого нет в таблице, при шифровании не изменяется.
Примеры

    Ввод: «Hello World». Вывод : «H3110 W0r1d».
    Ввод: «Я твой отец». Вывод : «1 4m y0ur f47h3r».
    Ввод: «Не знаю, что ещё можно проверить. Не волнуйтесь. Удачи». Вывод :
    «1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck».

"""
import typing
import unittest


def cypher(st: str) -> str:
    """
    Зашифровывает текст строки.
    """
    return st.translate(str.maketrans('IREASGTBOlzeasbtgo', '123456780123456790'))


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(cypher, (
        ("Hello World", "H3110 W0r1d"),
        ("I am your father", "1 4m y0ur f47h3r"),
        ("I do not know what else I can test. Be cool. Good luck", "1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck"),
        ("IlRzEeAaSsGbTtBgOo", "112233445566778900"),
        ("", ""),
    ))
