"""
Напишите функцию, которая будет проверять, является ли ЛЮБАЯ перестановка
символов входной строки палиндромом. Бонусные баллы за эффективное решение
и/или использование только встроенных функций языка. Считайте себя
гениальным, если сможете придумать версию, не использующую вообще никаких
функций.

Для этой ката предполагается, что все символы в нижнем регистре .
Пример

madam-> Правда
adamm-> Правда
junk-> Ложь
Намекать

Подход грубой силы заключался бы в том, чтобы сгенерировать все перестановки
строки и проверить каждую из них, является ли она палиндромом. Однако
оптимизированный подход вообще этого не требует.
"""


from collections import Counter


def permute_a_palindrome(s: str) -> bool:
    """
    Проверяет, является ли строка палиндромом, при перестановке
    символов.
    """
    return sum(x % 2 for x in Counter(s).values()) in (0, 1)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("", True),
        ("a", True),
        ("aa", True),
        ("aaa", True),
        ("baa", True),
        ("aab", True),
        ("baabcd", False),
        ("racecars", False),
        ("abcdefghba", False),
    )
    for key, val in data:
        assert permute_a_palindrome(key) == val


if __name__ == '__main__':
    test()
