"""
Предсказатель набора текста T9 помогает подсказывать возможные комбинации
слов на старом телефоне с цифровой клавиатурой. Каждая цифра клавиатуры
(2–9) представляет собой группу из 3–4 букв. Чтобы ввести букву, нажмите
один раз клавишу, соответствующую группе букв, содержащей нужную букву.
Ввод слов осуществляется последовательным набором букв слова.

Группы букв и соответствующие цифры следующие:

 -----------------
|  1  |  2  |  3  |
|     | ABC | DEF |
|-----|-----|-----|
|  4  |  5  |  6  |
| GHI | JKL | MNO |
|-----|-----|-----|
|  7  |  8  |  9  |
| PQRS| TUV | WXYZ|
 -----------------

Алгоритм прогнозирования пытается сопоставить входную последовательность
с заранее определенным словарем слов. Комбинации, которые появляются в
словаре, считаются допустимыми словами и отображаются как варианты.

Учитывая список слов в качестве справочного словаря и непустую строку
(из цифр 2–9) в качестве входных данных, завершите функцию, которая
возвращает предложения на основе строки цифр, найденных в справочном словаре.

Например:

T9(['hello', 'world'], '43556') returns ['hello']
T9(['good', 'home', 'new'], '4663') returns ['good', 'home']

Обратите внимание, что словарь должен быть нечувствителен к регистру
('hello'и 'Hello'это одинаковые записи).
Возвращаемый список должен содержать слово в том виде,
в котором оно указано в словаре (вместе с регистром).

Пример:
T9(['Hello', 'world'], '43556') returns ['Hello']

Если в данном словаре нет доступного предсказания, верните строку,
содержащую первые буквы буквенных групп, которые соответствуют входным цифрам.

Например:
T9([], '43556') returns ['gdjjm']
T9(['gold', 'word'], '4663') returns ['gmmd']
"""


def T9(words: list[str], seq: str) -> list[str]:
    """
    Возвращает предложения T9 для данной входной последовательности цифр,
    след. Если предложений нет, возвращает строку, состоящую из первых
    символы буквенных групп, присвоенные цифрам в последовательности.
    """
    tmp = '..abc.def.ghi.jkl.mno.pqrs.tuv.wxyz'.split('.')
    res = [w for w in words if all(a in tmp[int(b)] for a, b in zip(w.lower(), seq))]
    return res or [''.join(tmp[int(x)][0] for x in seq)]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((['hello', 'world'], '43556'), ['hello']),
        ((['good', 'home', 'new'], '4663'), ['good', 'home']),
        ((['gone', 'hood', 'good', 'old'], '4663'), ['gone', 'hood', 'good']),
        ((['Hello', 'world'], '43556'), ['Hello']),
        ((['gOOD', 'hOmE', 'NeW'], '4663'), ['gOOD', 'hOmE']),
        ((['goNe', 'hood', 'GOOD', 'old'], '4663'), ['goNe', 'hood', 'GOOD']),
        (([], '43556'), ['gdjjm']),
        ((['gold'], '4663'), ['gmmd']),
        ((['gone', 'hood', 'good', 'old'], '729'), ['paw']),
    )
    for key, val in data:
        assert T9(*key) == val


if __name__ == '__main__':
    test()
