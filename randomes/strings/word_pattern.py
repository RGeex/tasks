"""
В криптоанализе шаблоны слов могут быть полезным инструментом
для взлома простых шифров.

Образец слова — это описание сочетания букв, встречающихся в
слове, где каждой букве присваивается целочисленный код в
порядке появления. Итак, первая буква задан код 0, а второй
букве присваивается 1, если она отличается от первой буквы
или 0 в противном случае и так далее.

Например, слово «hello» превратится в «0.1.2.2.3».
Для этой задачи чувствительность к регистру игнорируется,
поэтому «hello», «helLo» и «heLlo» будут возвращать
один и тот же образец слова.

Ваша задача — вернуть образец слова для данного слова.
Все предоставленные слова будут быть непустыми строками
только буквенных символов, т.е. соответствующими регулярному
выражению "[a-zA-Z]+".

"""


def word_pattern(word: str) -> str:
    """
    Реализация шифра подменой букв цифрами в порядке появления в слове.
    """
    word = word.lower()
    temp = dict(zip(sorted(set(word), key=word.index), range(len(set(word)))))
    return '.'.join(str(temp[w]) for w in word)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("hello", "0.1.2.2.3"),
        ("heLlo", "0.1.2.2.3"),
        ("helLo", "0.1.2.2.3"),
        ("Hippopotomonstrosesquippedaliophobia",
         "0.1.2.2.3.2.3.4.3.5.3.6.7.4.8.3.7.9.7.10.11.1.2.2.9.12.13.14.1.3.2.0.3.15.1.13"),
    )
    for key, val in data:
        assert word_pattern(key) == val


if __name__ == '__main__':
    test()
