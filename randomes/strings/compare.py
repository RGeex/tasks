"""
Номера разделов представляют собой строки целых чисел, разделенных точками.
Разделы (главы) самого высокого уровня имеют номера 1, 2, 3 и т. д. Разделы
второго уровня имеют номера 1.1, 1.2, 1.3, 2.1, 2.2, 2.3 и т. д. Разделы
следующего уровня имеют номера 1.1.1, 1.1.2, 1.1. .2, 1.2.1, 1.2.2, впр.
Не существует ограничений на количество разделов, которые может иметь
документ, а также на количество уровней.

Раздел определенного уровня может появиться непосредственно внутри раздела,
расположенного на несколько уровней выше, без промежуточных уровней. Например,
раздел 1.0.1 может располагаться непосредственно под разделом 1, без раздела
уровня 2. Раздел 1.1 идет после раздела 1.0.1. Разделы с конечным «.0»
считаются такими же, как раздел с усеченным конечным «.0». Таким образом,
раздел 1.0 аналогичен разделу 1, а раздел 1.2.0.0 аналогичен разделу 1.2.

Напишите функцию compare(section1, section2) который возвращает -1, 0, или 1 в
зависимости от того, section1 это до, то же самое, что или после section2
соответственно.
"""
import typing
import unittest
from itertools import zip_longest as zl


def compare(s1: str, s2: str) -> int:
    """
    Проверяет последовательность 2-х переданных разделов.
    """
    return next(([-1, 1][a > b] for a, b in zl(*[map(int, s.split('.')) for s in (s1, s2)], fillvalue=0) if a != b), 0)


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(*key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(compare, (
        (('1', '2'), -1),
        (('1.1', '1.2'), -1),
        (('1.1', '1'), 1),
        (('1.2.3.4', '1.2.3.4'), 0),
        (('1114111', '1114112'), -1),
        (('3', '3.0'), 0),
        (('3.0', '3'), 0),
        (('3', '3.0.0.0'), 0),
        (('3.0.0.0', '3'), 0),
        (('1.2.1', '1.2.0'), 1),
        (('1.2.0', '1.2.1'), -1),
        (('3.0.0', '3.1.1'), -1),
        (('3.0.1', '3.1'), -1),
        (('1.2.3', '1.02.003'), 0),
    ))
