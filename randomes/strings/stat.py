"""
Вы «компьютерный эксперт» местной спортивной ассоциации (CAA). На соревнования
приезжает множество команд бегунов. Каждый раз, когда вы получаете строку все
результаты гонок каждой участвовавшей команды. Например, вот строка, показывающая
индивидуальные результаты команды из 5 бегунов:

"01|15|59, 1|47|6, 01|17|20, 1|32|34, 2|3|17"

Каждая часть строки имеет вид: h|m|sгде h, m, s
(h — часы, m — минуты, s — секунды) — положительное или нулевое целое число
(представленное в виде строк) с одной или двумя цифрами. Подстроки во входной
строке разделяются , или ,.

Для сравнения результатов команд вас просят дать три статистики; диапазон,
среднее и медианное значение .

    Range: разница между самым низким и самым высоким значениями.
    В {4, 6, 9, 3, 7} самое низкое значение — 3, а самое высокое — 9,
    поэтому диапазон составляет 9 - 3 = 6.

    Mean or Average: Чтобы вычислить среднее значение, сложите все числа.
    а затем разделите сумму на общее количество чисел.

    Median: В статистике медиана — это число, отделяющее большую половину.
    выборки данных из нижней половины. Медиану конечного списка чисел можно
    найти, расположив все наблюдения от наименьшего значения к наибольшему и
    выбор среднего (например, медиана {3, 3, 5, 9, 11} равна 5), когда имеется
    нечетное количество наблюдений. Если имеется четное количество наблюдений,
    то не существует единого среднего значения; медиана затем определяется как
    среднее значение двух средних значений (медиана {3, 5, 6, 9} равна (5 + 6)/2 = 5,5).

Ваша задача — вернуть строку, содержащую эти три значения. Для примера,
приведенного выше, результат строки будет

"Range: 00|47|18 Average: 01|35|15 Median: 01|32|34"

формы: «Диапазон: чч|мм|сс Среднее: чч|мм|сс Медиана: чч|мм|сс»`

где hh, mm, ss — целые числа (представленные строками), состоящие из двух цифр.
Примечания :

    если результат в секундах равен ab.xy... он будет сокращен до ab.
    если данная строка равна "", вы вернете ""
"""


from datetime import datetime as dt


def stat(s: str) -> str:
    """
    Расчитывет:
    - разниу между минимальным и максимальным временем
    - среднее значение времени
    - медианное знчение
    """
    res, c = [], sorted([dt.strptime(x, '%H|%M|%S') for x in s.replace(' ', '').split(',')]) if s else ''
    for i, w in enumerate('Range Average Median'.split() if s else ''):
        x = c[len(c)//2-(not len(c)%2):len(c)//2+1] if 1 < i else c if i else [dt.strptime(str(c[-1] - c[0]), '%H:%M:%S')]
        res.append(f"{w}: {(dt.fromtimestamp(sum(map(dt.timestamp, x))/((not i) or len(x))).strftime('%H|%M|%S'))}")
    return ' '.join(res)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('', ''),
        ("01|15|59, 1|47|16, 01|17|20, 1|32|34, 2|17|17", "Range: 01|01|18 Average: 01|38|05 Median: 01|32|34"),
        ("02|15|59, 2|47|16, 02|17|20, 2|32|34, 2|17|17, 2|22|00, 2|31|41", "Range: 00|31|17 Average: 02|26|18 Median: 02|22|00"),
        ("02|15|59, 2|47|16, 02|17|20, 2|32|34, 2|32|34, 2|17|17", "Range: 00|31|17 Average: 02|27|10 Median: 02|24|57"),
        ("0|15|59, 0|16|16, 0|17|20, 0|22|34, 0|19|34, 0|15|0", "Range: 00|07|34 Average: 00|17|47 Median: 00|16|48"),
        ("11|15|59, 10|16|16, 12|17|20, 9|22|34, 13|19|34, 11|15|17, 11|22|00, 10|26|37, 12|17|48, 9|16|30, 12|20|14, 11|25|11", "Range: 04|03|04 Average: 11|14|36 Median: 11|18|59"),
        ("1|15|59, 1|16|16, 1|17|20, 1|22|34, 1|19|34, 1|15|17, 1|22|00, 1|26|37, 1|17|48, 1|16|30, 1|20|14, 1|25|11", "Range: 00|11|20 Average: 01|19|36 Median: 01|18|41"),
    )
    for key, val in data:
        assert stat(key) == val


if __name__ == '__main__':
    test()
