"""
По следам npm left-pad разгром, вы решаете написать новый метод
суперзаполнения, который превосходит функциональность left-pad.
Ваша версия будет предоставлять ту же функциональность, но
дополнительно добавит правильное и обоснованное заполнение
строки — super_pad.

Ваша функция super_pad должен принимать три аргумента: строку
string, ширина последней строки widthи символ заполнения fill.
Однако символ заполнения может быть дополнен строкой формата,
что приведет к различным стратегиям заполнения. Если fill
начинается с '<' строка дополняется слева оставшейся строкой
заполнения, и если fill начинается с '>' строка дополняется
справа. Наконец, если fill начинается с '^' строка дополняется
слева и справа, при этом левое заполнение всегда больше или равно
правому. fill Конечно, строка может содержать более одного символа.

Несколько примеров для пояснения внутренней работы:

    super_pad("test", 10) возвращает "      test"
    super_pad("test", 10, "x") возвращает "xxxxxxtest"
    super_pad("test", 10, "xO") возвращает "xOxOxOtest"
    super_pad("test", 10, "xO-") возвращает "xO-xO-test"
    super_pad("some other test", 10, "nope") возвращает "other test"
    super_pad("some other test", 10, "> ") возвращает "some other"
    super_pad("test", 7, ">nope") возвращает "testnop"
    super_pad("test", 7, "^more complex") возвращает "motestm"
    super_pad("test", 7, "") возвращает "test"

The super_pad метод всегда возвращает строку длины width если возможно.
Мы ожидаем, что width быть положительным (включая 0), а заливка также
может быть пустой строкой.
"""


def super_pad(s: str, n: int, z: str | None=None):
    """
    Заполняет переданную строку указанными символами, заданной длины.
    """
    k, (x, z) = abs(len(s) - n), ('<', ' ') if z is None else ([('<', z), (z[:1], z[1:])][(z[:1] or '*') in '<^>'])
    z, (a, b) = (z * k)[:k], divmod(k, 2)
    return [f'{s}'.join(([z, ''][::x == '<' or -1], [z[:a + b], z[:a]])[x == '^']), {'>': s[:-k], '<': s[k:]}.get(x, s[k // 2:-k // 2])][n < len(s)]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("test", 10), "      test"),
        (("test", 10, "x"), "xxxxxxtest"),
        (("test", 10, "xO"), "xOxOxOtest"),
        (("test", 10, "xO-"), "xO-xO-test"),
        (("some other test", 10, "nope"), "other test"),
        (("some other test", 10, "> "), "some other"),
        (("test", 7, ">nope"), "testnop"),
        (("test", 7, "^more complex"), "motestm"),
        (("test", 7, ""), "test"),
    )
    for key, val in data:
        assert super_pad(*key) == val


if __name__ == '__main__':
    test()
