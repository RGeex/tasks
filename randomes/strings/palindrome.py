"""
Учитывая строку, мы хотели бы знать, одинаковы ли гласные, согласные или оба
(оцениваются отдельно) в обратном направлении и в прямом. См. примеры внизу
этого описания.

Тест не должен учитывать регистр и должен оценивать только буквы, игнорируя
пробелы, цифры и другие небуквенные символы ("_" "*" " " "-"). Гласные – AEIOU.
Буква Й является согласной для этого упражнения.

Если строка не имеет одинаковой последовательности согласных или гласных в
обратном направлении, мы хотим вернуть «ни». Если палиндромными являются только
гласные, верните «гласную». Если палиндромными являются только согласные,
верните «согласная». Если гласные и согласные в строке являются палиндромными,
верните «оба».

Вы можете предположить, что все тестовые примеры будут содержать хотя бы одну
гласную и одну согласную.

Наслаждаться!

Некоторые примеры:

«egg» вернет «оба», поскольку «e» в обратном направлении такое же, как и в
прямом, как и «gg».

«race car» также вернет «оба», поскольку «rccr» и «aea» являются палиндромами.

«волшебник» вернет «ни то, ни другое».

«pea13ce» вернет «гласную», поскольку «eae» является палиндромом, а «pc» — нет.

«*73_ ab» вернет «оба», поскольку «a» и «b» являются палиндромами
(по моему мнению...)
"""


def palindrome(s: str) -> str:
    """
    Проверяет являются ли отдельно гласные и согласные палиндромами.
    """
    x = [x == x[::-1] for x in map(''.join, zip(*[[x, ''][::x in 'aeiou' or -1] for x in s.lower() if x.isalpha()]))]
    return ['neither', ['vowel', 'consonant'][sum(x) and x.index(1)], 'both'][sum(x)]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('egg',        'both'),
        ('raCe car',   'both'),
        ('wizard',     'neither'),
        ('pea13ce',    'vowel'),
        (' *73_ ab',   'both'),
        ('3-B0oto b',  'both'),
        ('_inte 4',    'neither'),
        ('neither',    'vowel'),
        ('intuition',  'consonant'),
    )
    for key, val in data:
        assert palindrome(key) == val


if __name__ == '__main__':
    test()
