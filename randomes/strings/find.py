"""
Постановка задачи

Вам дана строка цифр, представляющая собой последовательность последовательных натуральных чисел,
объединенных вместе. Ваша задача — найти наименьшее возможное первое число в последовательности.
Последовательность начинается с одно- или многозначного числа и продолжается числами, каждое из
которых увеличивается на 1. Если можно сформировать несколько последовательностей, выберите ту,
которая начинается с наименьшего числа.
Примеры

    «123» -> [1, 2, 3] -> 1
    «91011» -> [9, 10, 11] -> 9
    «17181920» -> [17, 18, 19, 20] -> 17
    «9899100» -> [98, 99, 100] -> 98
    «91» -> [91] -> 91
    «121122123» -> [121, 122, 123] -> 121
    "1235" -> [1235] -> 1235
    «101» -> [101] -> 101

Ограничения

    Длина входной строки: 1–200 символов.
    Наименьшее возможное первое число: 1 – 1 000 000 000.

Помните, что главное — сформировать последовательность последовательных натуральных чисел. Если
последовательность соответствует входной строке, вы нашли наименьшее возможное первое число.
Поэкспериментируйте с разной длиной первого числа, пока не найдете совпадение или не исчерпаете
все возможности.
"""


def find(s: str, n: str = '') -> int:
    """
    Поиск в строке, состоящей из числовой последовательности, первого числа из переданных.
    """
    if n:
        return [s.startswith(n) and find(s.replace(n, '', 1), str(int(n) + 1)), 1][not s]
    return int(next((s[:i] for i in range(1, len(s)) if find(s[i:], str(int(s[:i]) + 1))), s))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("123456789101112131415", 1),
        ("17181920", 17),
        ("72637236", 72637236),
        ("1112", 11),
        ("91011", 9),
        ("99100", 99),
        ("431243", 431243),
        ("577495", 577495),
    )
    for key, val in data:
        assert find(key) == val


if __name__ == '__main__':
    test()
