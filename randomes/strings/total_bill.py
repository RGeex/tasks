"""
Сэм открыл новый ресторан-суши-поезд — ресторан, где суши подаются на тарелках,
которые перемещаются по бару на конвейерной ленте, а клиенты берут понравившуюся
им тарелку.

Сэм использует новую технологию визуального распознавания Glamazon, которая позволяет компьютеру
регистрировать количество тарелок на столе клиента и цвет этих тарелок. Количество тарелок
возвращается в виде строки. Например, если клиент съел 3 тарелки суши на красной тарелке,
компьютер вернет строку "rrr".

В настоящее время Сэм подает суши только на красных тарелках, поскольку он пытается привлечь
клиентов в свой ресторан. На конвейерной ленте также есть небольшие тарелки для приправ,
таких как имбирь и васаби - компьютер отмечает их в строке, которая возвращается как пробел;
например "rrr r"обозначает 4 тарелки красных суши и тарелку приправ.

Сэм хотел бы, чтобы вы помогли ему написать программу для кассовой машины, которая считывала бы
строку и возвращала общую сумму, которую клиент должен заплатить, когда он просит счет.
Текущая цена на блюда следующая:

    Красные тарелки суши: 2 доллара за штуку, но каждая пятая — бесплатно!
    Приправы: бесплатно

Примеры

"rr"           -->  4     # 2 plates
"rr rrr"       -->  8     # 5 plates, 1 free
"rrrrr rrrrr"  -->  16    # 10 plates, 2 free
"""
import typing
import unittest


def total_bill(st: str) -> int:
    """
    Подсчитывает стоимость блюд, заказанных клиентом.
    """
    return ((count := st.count('r')) - count // 5) * 2


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(total_bill, (
        ('rr', 4),
        ('rr rrr', 8),
        ('rr rrr rrr rr', 16),
        ('rrrrrrrrrrrrrrrrrr   rr r', 34),
        ('', 0),
    ))
