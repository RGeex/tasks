"""
Игра ПЛАМЯ – это метод узнать статус любовных отношений.
Ввод двух имен даст вам результат отношений между ними.

Чтобы получить результат,
Сначала вычеркните все буквы, общие в именах.
Во-вторых, удалите зачеркнутую букву в обоих именах.
В-третьих, подсчитайте количество оставшихся символов.
В-четвертых, учитывая слово ПЛАМЯ, с каждой буквой, начиная слева, досчитайте до числа,
которое вы получили на предыдущем шаге, и возвращайтесь к букве F слева с каждым проходом.
Наконец, в букве, на которую вы попадаете, есть слово, обозначаемое аббревиатурой «пламя».

    F = Friendship
    L = Love
    A = Affection
    M = Marriage
    E = Enemies
    S = Siblings

Теперь напишите метод showRelationship(), который принимает два имени, мужское и женское,
и который будет возвращать отношения между ними.

Пример игры FLAMES Имена - НИЛ и МЭЙ соответственно.

    E часто встречается на NEIL и MAE.
    Удаление E из NEIL и MAE оставит NIL и MA в обоих именах соответственно.
    NIL состоит из 3 символов, а MA из 2 символов, всего 5 символов.
    ПЛАМЯ --> 1>F 2>L 3>A 4>M 5>E
    E означает «Враги».

НИЛ и МЭЙ — враги.

"""
import re


def show_relationship(male: str, female: str) -> str:
    """
    Игра "FLAMES".
    """
    tmp = 'Friendship Love Affection Marriage Enemies Siblings'.split()
    return tmp[(len(re.sub('|'.join(set(male) & set(female)), '', male + female)) - 1) % 6]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("NEIL", "MAE"), "Enemies"),
        (("JOE", "ANN"), "Siblings"),
        (("KEVIN", "KATH"), "Friendship"),
        (("ZLHJRJHR", "QEMSFR"), "Enemies"),
    )
    for key, val in data:
        assert show_relationship(*key) == val


if __name__ == '__main__':
    test()
