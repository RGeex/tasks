"""
Вам даны три целочисленных входных параметра: длина, минимум и максимум.

Верните строку, которая:

    Начинается с минимума
    Поднимается по одному до достижения максимума, затем
    Спускается по одному до достижения минимума.
    повторяйте, пока строка не станет подходящей длины

Примеры:

 length: 5, minimum: 1, maximum: 3   ==>  "12321"
 length: 14, minimum: 0, maximum: 2  ==>  "01210121012101"
 length: 11, minimum: 5, maximum: 9  ==>  "56789876567"

Примечания:

    длина всегда будет неотрицательной
    отрицательные числа могут появляться для минимальных и максимальных
    значений
    дефисы/тире («-») для отрицательных чисел учитываются в длине
    результирующая строка должна быть усечена до указанной длины.
    вернуть пустую строку, если максимум <минимум или длина == 0
    минимум и максимум могут равняться друг другу и давать в результате одно
    число, повторяющееся по всей длине строки
"""


def ascend_descend(length: int, minimum: int, maximum: int) -> str:
    """
    Строка идущая волной от минимума к самсимума, заданной длины, учитывае знак -.
    """
    tmp, x, k = list(map(str, range(minimum, maximum + 1))), any((length, minimum, maximum)), not minimum == maximum
    return ''.join([''.join(tmp[::[1, -1][i % 2]][[k, 0][not z]:]) for z, i in enumerate(range(length // (len(tmp) - k) + 1))])[:length] if x else ''


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((5, 1, 3), "12321"),
        ((14, 0, 2), "01210121012101"),
        ((11, 5, 9), "56789876567"),
    )
    for key, val in data:
        assert ascend_descend(*key) == val


if __name__ == '__main__':
    test()
