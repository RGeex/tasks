"""
 — Счастливое число это такое число, в котором, если вы неоднократно возводите его цифры в квадрат
 и складываете их, в конечном итоге вы получаете 1.

Например:

7 -> 49 -> 97 -> 130 -> 10 -> 1 так 7 это счастливое число.

42 -> 20 -> 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 так 42 это не счастливое число.

Это также можно сделать с помощью степеней, отличных от 2.

Завершите функцию, которая получает 2 аргумента: начальное число и показатель степени. Он должен
возвращать массив чисел, содержащий любой встреченный цикл, или [1] если он не встретит ни одного.
Этот массив должен включать только числа в цикле, а не те, которые ведут в цикл, и должен повторять
первое число как последнее, например:

[42, 20, 4, 16, 37, 58, 89, 145, 42]

Первое число в массиве должно быть там, где впервые встречается цикл.

Все входные данные функции будут положительными целыми числами с показателем степени от 2 до 4.
"""
import typing
import unittest


def is_happy(n: int, pow: int, c: int = 1) -> list[int]:
    """
    Проверяет, является ли число счастливым и возвращает список с
    - значениями цикла, если число не является счастливым.
    - значанием 1, если число является счастливым.
    """
    while c and (res := [n]) or res[-1] not in (1, n):
        res, c = res + [sum(int(x) ** pow for x in str(res[-1]))], 0
    return [res, [res[-1]]][res[-1] == 1]


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(*key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(is_happy, (
        ((7, 2), [1]),
        ((42, 2), [42, 20, 4, 16, 37, 58, 89, 145, 42]),
        ((58, 2), [58, 89, 145, 42, 20, 4, 16, 37, 58]),
        ((10, 4), [1]),
    ))
