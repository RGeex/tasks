"""
Фон
Вы, наверное, знаете, что килограмм, используемый айтишниками, отличается от
килограмм, используемый остальным миром. В то время как килограмм в КБ
(в основном) интерпретируется как 1024 байта (особенно операционными системами),
килограмм, не относящийся к IT , обозначает коэффициент 1000
(например, «1 кг равен 1000 г»). То же самое касается приставок мега, гига,
тера, пета и так далее. Во избежание недоразумений (например, ваш магазин
оборудования продает вам жесткий диск размером 1E+12 байт емкостью 1 ТБ,
тогда как ваша Windows заявляет, что у него только 932 ГБ, поскольку магазин
использует коэффициент 1000, тогда как операционные системы по умолчанию
используют коэффициент 1024), Международная электротехническая комиссия.
предложил использовать кибибайт в качестве 1024 байта. Соответствующим символом
единицы будет KiB . Другие префиксы будут соответственно:

1 MiB = 1024 KiB   
1 GiB = 1024 MiB   
1 TiB = 1024 GiB     

Задача
Ваша задача — написать функцию преобразования между единицами КБ и КиБ.
Функция получает
в качестве параметра размер памяти с единицей измерения и преобразует его в
соответствующую единицу другой системы:

memorysizeConversion ( "10 KiB") -> "10.24 kB"   
memorysizeConversion ( "1 kB") -> "0.977 KiB"   
memorysizeConversion ( "10 TB") -> "9.095 TiB"   
memorysizeConversion ( "4.1 GiB") -> "4.402 GB"   

Подсказки

    параметр всегда содержит (дробное) число, пробел и допустимую единицу
    измерения.
    единицы измерения чувствительны к регистру, допустимые единицы: кБ МБ ГБ
    ТБ КиБ МиБ ГиБ ТиБ
    результат должен быть округлен до трех десятичных знаков (округление до
    половины вверх, без конечных нулей), см. примеры выше

Ресурсы Если вы хотите узнать больше о ...ibi-Units:
https://en.wikipedia.org/wiki/Kibibyte
"""


def memorysize_conversion(s: str) -> str:
    """
    Конвертирует биты в байты и наоборот.
    """
    c, (n, e) = [1000, 1024], s.upper().split()
    x, (a, b) = [('i', c), ('', c[::-1])][len(e) == 3]
    return f'{round(float(n) * a ** (t := " KMGTPEZY".index(e[0])) / b ** t, 3)} ' + f'{x}'.join(e[::len(e) - 1]).replace('KB', 'kB')


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('1 KiB','1.024 kB'),
        ("1 MiB","1.049 MB"),
        ("1 GB","0.931 GiB"),
    )
    for key, val in data:
        assert memorysize_conversion(key) == val


if __name__ == '__main__':
    test()
