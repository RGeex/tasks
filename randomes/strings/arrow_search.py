"""
Учитывая string, ваша задача — подсчитать количество и длину символов стрелок
в этой строке и вернуть int используя следующие правила:

    Строка будет содержать только символы ., -, =, <, >.
    Стрелка должна начинаться либо с < или >.
    Стрелки оцениваются в зависимости от их длины и направления, например:
        (Стрелки, направленные влево, оцениваются как отрицательные, а стрелки,
        направленные вправо, — как положительные)
        > is scored as 1
        -> is scored as 2
        < is scored as -1
        <- is scored as -2
    Хвост стрелы (если он есть) должен полностью состоять из - или =. Вы не
    можете смешивать.
    Так, --> была бы допустимой стрелкой длины 3, но =-> будет только
    считаться -> как часть стрелки.
    Кроме того, стрелы с хвостиком = оцениваются в два раза выше, чем
    стрелы с хвостиком -, например:
        --> is scored as 3
        ==> is scored as 6
        <= is scored as -4

    Двусторонние стрелки, например <-> или <===> считаются 0.
    . является пустым символом и не может быть хвостом стрелки.
    Примеры

    arrow_search('>.') # 1
    arrow_search('<--..') # -3
    arrow_search('><=><--') # -2
    arrow_search('>===>->') # 11
"""


import re


def arrow_search(s: str) -> int:
    """
    Подсчитывает сумму длин стрелок.
    """
    return sum(len(x) * [-1, 1]['>' in x] * ('-' in x or len(x) == 1 or 2) for x in re.findall(r'=+>|-*>|<=+|<-*', re.sub(r'<-+>|<=+>', '.', s)))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('>.', 1),
        ('<--..', -3),
        ('><=><--', -2),
        ('>===>->', 11),
        ('......', 0),
        ('<-->', 0),
    )
    for key, val in data:
        assert arrow_search(key) == val


if __name__ == '__main__':
    test()
