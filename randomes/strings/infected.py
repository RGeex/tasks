"""
‚ö†Ô∏è –ú–∏—Ä –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ! –ù–æ–≤–∞—è –ø–∞–Ω–¥–µ–º–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±–æ—Ä–µ—Ç—Å—è —Å —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ–º.
–ö–∞–∂–¥—ã–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞, –Ω–æ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—é–¥–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∏—Å—å –¥–æ
–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.

üó∫Ô∏è –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã–∫–∞—Ä—Ç–∞ –º–∏—Ä–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏:

string s = "01000000X000X011X0X"

'0' : uninfected

'1' : infected

'X' : ocean

‚ö´ –í–∏—Ä—É—Å –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É –æ–∫–µ–∞–Ω–∞.

‚ö´ –ï—Å–ª–∏ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –∑–∞—Ä–∞–∑–∏—Ç—Å—è, –≤—Å–µ –ª—é–¥–∏ –Ω–∞ —ç—Ç–æ–º –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–µ —Ç–æ–∂–µ –∑–∞—Ä–∞–∑—è—Ç—Å—è.

‚ö´ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤ –∏—Ç–æ–≥–µ –∑–∞—Ä–∞–∑–∏–ª–æ—Å—å.

‚òëÔ∏è –í–µ—Ä–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –æ—Ç –æ–±—â–µ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è.

‚ùó‚ùó –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω—ã!

üí° –ü—Ä–∏–º–µ—Ä:

 start: map1 = "01000000X000X011X0X"
 end:   map1 = "11111111X000X111X0X"
 total = 15
 infected = 11
 percentage = 100*11/15 = 73.33333333333333

‚ûï –î–ª—è –∫–∞—Ä—Ç –±–µ–∑ –æ–∫–µ–∞–Ω–æ–≤ ¬´X¬ª –≤–µ—Å—å –º–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω.

‚ûï –î–ª—è –∫–∞—Ä—Ç –±–µ–∑ ¬´0¬ª –∏ ¬´1¬ª –≤–µ—Ä–Ω–∏—Ç–µ 0, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
"""
import typing
import unittest


def infected(st: str) -> int | float:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö.
    """
    return 100 * sum(len(x) for x in st.split('X') if '1' in x) / (len(st.replace('X', '')) or 1)


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å –ø–æ–º–æ—â—å—é unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """–°–æ–∑–¥–∞–µ—Ç –∫–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(infected, (
        ("01000000X000X011X0X",73.33333333333333),
        ("01X000X010X011XX", 72.72727272727273),
        ("XXXXX", 0),
        ("00000000X00X0000", 0),
        ("0000000010", 100),
        ("000001XXXX0010X1X00010", 100),
        ("X00X000000X10X0100",42.857142857142854),
    ))
