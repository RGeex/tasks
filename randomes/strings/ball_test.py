"""
СИТУАЦИЯ

Представьте, что вы пытаетесь катить мяч по дороге на определённое расстояние.
Начальная скорость мяча постепенно уменьшается из-за трения и трещин на дороге.
Каждый раз, когда мяч проезжает расстояние, равное его скорости, или перекатывается
через трещину, его скорость уменьшается на 1. Если задана начальная скорость s мяча
и карта дороги r, представленная строкой, верните ответ, сможет ли мяч доехать до
конца дороги (Верно или Неверно).

ПРИМЕЧАНИЯ

    Мяч со скоростью 0 неподвижен.

    Если мяч случайно прокатился по трещине, снижение скорости должно вступить в силу
    только после того, как он проедет расстояние, равное его скорости. Например, если
    скорость была 10, но мяч проехал 2 трещины, прежде чем проехал 10, скорость мяча
    должна оставаться 10 до тех пор, пока он не достигнет расстояния 10, после чего
    скорость должна снизиться до 7 (-2 из-за трещин и -1 из-за трения).

    На карте «_» обозначает ровную поверхность, а «x» — трещину.

    Длина дорожной карты будет равна расстоянию до конечного пункта назначения мяча.

    Чтобы решение считалось верным, мяч должен достичь последней плитки дороги.

ПРИМЕРЫ

    Скорость 100 и дорожная карта «_» должны вернуть True, поскольку мяч будет
    двигаться слишком быстро для того, чтобы возникло трение, а на дороге нет трещин.

    Скорость 1 и дорожная карта «___________» должны вернуть значение «Ложь»,
    поскольку трение остановит мяч после 1 расстояния.
"""
import typing
import unittest


def ball_test(s: int, r: str) -> bool:
    """
    Определяет докатится ли мяч до конца пути.
    """
    i = 0
    while s > 0 and r[i:]:
        s, i = s - r[i:i + s].count('x') - 1, i + s
    return s > 0 or not r[i:]


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(*key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(ball_test, (
        ((100, '_'), True),
        ((24, 'xxxxxxxxxx_____x___xx__xx____________x__________x_'), True),
        ((1, '__'), False),
        ((0, '_____x___x_____x______x______x_______x_______x___x'), False),
        ((10, 'xxxxxxxxxxx'), False),
        ((5, 'xxxxx'), True),
        ((10, '______________________________________________________________'), False),
        ((5, '__________'), True),
    ))
