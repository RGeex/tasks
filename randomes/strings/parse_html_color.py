"""
В этом ката вы анализируете цвета RGB, представленные строками. Форматы в
основном используются в HTML и CSS. Ваша задача — реализовать функцию,
которая принимает цвет в виде строки и возвращает проанализированный цвет
в виде карты (см. Примеры).
Вход:

Входная строка представляет собой одно из следующих значений:

    Шестизначный шестнадцатеричный код — «#RRGGBB».
    например, "#012345", "#789abc", "#FFA077"
    Каждая пара цифр представляет значение канала в шестнадцатеричном формате:
    от 00 до FF.

    Трехзначный шестнадцатеричный код — «#RGB».
    например, "#012", "#aaa", "#F5A"
    Каждая цифра представляет значение от 0 до F, которое преобразуется в
    двухзначное шестнадцатеричное число: 0->00, 1->11, 2->22 и так далее.

    Предустановленное название цвета
    например, «красный», «СИНИЙ», «Лаймово-зеленый»
    Вы должны использовать предопределенную карту PRESET_COLORS
    (JavaScript, Python, Ruby), presetColors (Ява, C#, Хаскелл),
    PresetColors (Иди) или preset-colors(Кложур). Ключи представляют
    собой названия предустановленных цветов в нижнем регистре , а значения
    представляют собой соответствующие цвета в 6-значном шестнадцатеричном
    формате (так же, как 1. «#RRGGBB»).

Примеры:

parse_html_color('#80FFA0')   # => {'r': 128, 'g': 255, 'b': 160}
parse_html_color('#3B7')      # => {'r': 51,  'g': 187, 'b': 119}
parse_html_color('LimeGreen') # => {'r': 50,  'g': 205, 'b': 50 }
"""


PRESET_COLORS = {
    'limegreen': '#32cd32',
}


def parse_html_color(s: str) -> dict:
    """
    Парсинг строки COLOR, HEX => RGB.
    """
    n = len(s := PRESET_COLORS.get(s.lower(), s)) // 3
    return dict(zip('rgb', [int(f'{c:{c[0]}>2}', 16) for x in range(3) if (c:=s[1:][x*n:x*n+n])]))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ('#80FFA0',   {'r': 128, 'g': 255, 'b': 160}),
        ('#3B7',      {'r': 51,  'g': 187, 'b': 119}),
        ('LimeGreen', {'r': 50,  'g': 205, 'b': 50 }),
    )
    for key, val in data:
        assert parse_html_color(key) == val


if __name__ == '__main__':
    test()
