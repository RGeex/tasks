"""
Вы получаете массив массивов.
Если вы отсортируете массивы по длине, вы увидите, что их значения длины являются последовательными.
Но одного массива не хватает!


Вам нужно написать метод, который возвращает длину отсутствующего массива.

Example:
[[1, 2], [4, 5, 1, 1], [1], [5, 6, 7, 8, 9]] --> 3


Если массив массивов имеет значение null/nil или пуст, метод должен вернуть 0.

Если массив в массиве имеет значение NULL или пуст, метод также должен возвращать 0!
Всегда будет отсутствующий элемент, и его длина всегда будет находиться между заданными массивами.
"""


def get_length_of_missing_array(arr: list) -> int:
    """
    Поиск длинны пропущенного списка.
    """
    return int(all(arr)) and next((i for i, x in enumerate(sorted(arr, key=len), len(min(arr or [[]], key=len))) if i != len(x)), 0)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([[1, 2], [4, 5, 1, 1], [1], [5, 6, 7, 8, 9]], 3),
        ([[5, 2, 9], [4, 5, 1, 1], [1], [5, 6, 7, 8, 9]], 2),
        ([[None], [None, None, None]], 2),
        ([['a', 'a', 'a'], ['a', 'a'], ['a', 'a', 'a', 'a'], ['a'], ['a', 'a', 'a', 'a', 'a', 'a']], 5)
    )
    for key, val in data:
        assert get_length_of_missing_array(key) == val


if __name__ == '__main__':
    test()
