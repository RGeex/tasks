"""
Напишите функцию, которая по заданному целому числу N, возвращает массив целых чисел 1.
N расположены таким образом, что сумма каждых двух последовательных чисел равна квадрату.

Решение допустимо тогда и только тогда, когда выполняются следующие два критерия:

    Каждое число в диапазоне 1..Nиспользуется один и только один раз.
    Сумма каждых двух последовательных чисел представляет собой полный квадрат.

Пример

Для N=15 решение может выглядеть так:

[ 9, 7, 2, 14, 11, 5, 4, 12, 13, 3, 6, 10, 15, 1, 8 ]
Проверка

    Все числа используются один и только один раз. При сортировке по возрастанию массив выглядит так:

[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ]

    Сумма каждых двух последовательных чисел представляет собой полный квадрат:

   16    16     16     16     16     16     16
   /+\   /+\    /+\    /+\    /+\    /+\    /+\
[ 9, 7, 2, 14, 11, 5, 4, 12, 13, 3, 6, 10, 15, 1, 8 ]
      \+/    \+/    \+/    \+/    \+/    \+/    \+/
       9     25      9     25      9     25      9

9 = 3*3
16 = 4*4
25 = 5*5

Если решения нет, верните False(пустой вектор в C++; nullна Яве).
Например, если N=5, затем числа 1,2,3,4,5нельзя поместить в строку квадратных сумм: 1+3=4, 4+5=9,
но 2не имеет пар и не может связать [1,3]и [4,5]

Ограничения тестов:

    1 <= N <= 1000

    Все возможные значения Nтестируются
    Решения грубой силы могут достигать только N=50.
    Размер кода ограничен максимум 20 КБ, а внешние модули отключены: встраивание всех
    предварительно рассчитанных результатов невозможно.

"""


def square_sums(n: int) -> list | bool:
    """
    Сортировка чисел от 1 до N включительно, так что бы сумма любых соседних элементов была квадратом целого числа.
    """
    q = [x**2 for x in range(2, int((n*2)**.5) + 1)]
    t = {x: [i - x for i in q if x < i and i - x <= n] for x in range(n, 0, -1)}

    def tmp(arr: list) -> list | bool:
        """
        Перебор вариантов рекурсивно.
        """
        return arr if len(arr) == n else next((r for x in t.get(arr[-1]) if x not in arr and (r := tmp(arr + [x]))), False)

    return next((r for x in sorted(t, key=lambda x: (len(t[x]), x)) if (r := tmp([x]))), False)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (13, False),
        (15, [9, 7, 2, 14, 11, 5, 4, 12, 13, 3, 6, 10, 15, 1, 8]),
        (23, [9, 16, 20, 5, 11, 14, 22, 3, 1, 8, 17, 19, 6, 10, 15, 21, 4, 12, 13, 23, 2, 7, 18]),
        (33, [25, 11, 5, 4, 32, 17, 8, 28, 21, 15, 1, 24, 12, 13, 3, 33,
         31, 18, 7, 29, 20, 16, 9, 27, 22, 14, 2, 23, 26, 10, 6, 19, 30]),
    )
    for key, val in data:
        assert square_sums(key) == val


if __name__ == '__main__':
    test()
