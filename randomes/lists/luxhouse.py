"""
В столице Берляндии n многоэтажных зданий. Архитектор, застроивший столицу, был очень
изобретательным, поэтому все дома в городе были построены в один ряд.

Пронумеруем все дома слева направо, начиная с 0. Дом считается роскошным, если количество
этажей в нем строго больше, чем в каждом доме с большей номерностью. Другими словами,
дом считается роскошным, если этажность в нем строго больше, чем во всех домах,
расположенных справа от него.

Нового архитектора интересуют n вопросов, i-й из них следующий: «сколько этажей нужно добавить
к i-му дому, чтобы сделать его роскошным?» (Для каждого i от 1 до n включительно).
Вам необходимо помочь ему справиться с этой задачей.

Обратите внимание, что все эти вопросы независимы друг от друга — ответ на вопрос о доме
i не влияет на другие ответы (т. е. этажи к домам фактически не добавляются).
Ввод, вывод

    [input]целочисленный массив houses

Массив целых положительных чисел, представляющих количество этажей в каждом доме.

i-й элемент — это количество этажей в i-м доме.

1 ≤ houses.length ≤ 1000

    [output]целочисленный массив

Массив имеет ту же длину, что и входной массив, i-й элемент представляет количество этажей,
которые следует добавить к i-му дому, чтобы сделать его роскошным.
Пример

Для houses = [1,2,3,1,2], вывод должен быть [3,2,0,2,0].
"""


def luxhouse(lst: list) -> list:
    """
    Кол-во необходимых этажей для становления дома роскошным, индивидуально.
    """
    return [max(max(lst[i:] + [0]) + 1 - x, 0) for i, x in enumerate(lst, 1)]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([1, 2, 3, 1, 2], [3, 2, 0, 2, 0]),
        ([3, 2, 1, 4], [2, 3, 4, 0]),
        ([1, 2, 3], [3, 2, 0]),
        ([3, 2, 1], [0, 0, 0]),
        ([1, 1, 1], [1, 1, 0]),
        ([70, 60, 64], [0, 5, 0]),
    )
    for key, val in data:
        assert luxhouse(key) == val


if __name__ == '__main__':
    test()
