"""
Вы находитесь в позиции [0, 0] в лабиринте NxN и можете двигаться только
в одном из четырех основных направлений (т.е. на север, восток, юг, запад).
Возвращает минимальное количество шагов до выхода из позиции [N-1, N-1],
если можно добраться до выхода из стартовой позиции.
В противном случае вернуть ложь.

Пустые позиции отмечены .. Стены отмечены W. Начальная и выходная позиции
гарантированно пусты во всех тестовых случаях.
"""


def path_finder(maze: str) -> int | bool:
    """Поиск пути в двумерном массиве от старта: (0, 0) к финишу:
    (N-1, N-1). Возвращает кол-во шагов или False, если путь невозможен."""

    def temp(x, y, r, v, z) -> None:
        """Проверяет заданную клетку и помечает ее, как пройденную,
        если препятствие, задает шаг для клетки."""
        if [x, y][z] in range(r) and data.get((x, y)) is None:
            data.update({(x, y): [v, int(maze[x][y] == 'W')]})

    maze = maze.split('\n')
    data = {(0, 0): [0, 0]}
    stop = tuple(map(lambda x: len(x) - 1, (maze, maze[0])))

    # если есть не посещенные клетки
    while dct := dict((k, v) for k, v in data.items() if not v[1]):
        for k, v in dct.items():
            # помечает как посещенную
            data[k][1] = 1

            # поиск не посещенных соседей
            for n in range(-1, 2, 2):
                temp(k[0] + n, k[1], len(maze), v[0] + 1, 0)
                temp(k[0], k[1] + n, len(maze[0]), v[0] + 1, 1)

    return data.get(stop, [0])[0] or False


def test() -> None:
    """Тестирование работы алгоритмов."""
    a = "\n".join([
        ".W.",
        ".W.",
        "..."
    ]), 4
    b = "\n".join([
        ".W.",
        ".W.",
        "W.."
    ]), False
    c = "\n".join([
        "......",
        "......",
        "......",
        "......",
        "......",
        "......"
    ]), 10
    d = "\n".join([
        "......",
        "......",
        "......",
        "......",
        ".....W",
        "....W."
    ]), False

    for n, m in (a, b, c, d):
        assert path_finder(n) == m


if __name__ == '__main__':
    test()
