"""
Давайте рассмотрим этот пример (массив, записанный в общем формате):

ls = [0, 1, 3, 6, 10]

Его следующие части:

ls = [0, 1, 3, 6, 10]
ls = [1, 3, 6, 10]
ls = [3, 6, 10]
ls = [6, 10]
ls = [10]
ls = []

Соответствующие суммы (собраны в список): [20, 20, 19, 16, 10, 0]

Функция parts_sums(или его варианты на других языках) примет в качестве параметра список
ls и вернуть список сумм его частей, как определено выше.
Другие примеры:

ls = [1, 2, 3, 4, 5, 6] 
parts_sums(ls) -> [21, 20, 18, 15, 11, 6, 0]

ls = [744125, 935, 407, 454, 430, 90, 144, 6710213, 889, 810, 2579358]
parts_sums(ls) -> [10037855, 9293730, 9292795, 9292388, 9291934, 9291504, 9291414, 9291270,
2581057, 2580168, 2579358, 0]

Примечания

    Взгляните на производительность: некоторые списки содержат тысячи элементов.
    Пожалуйста, спрашивайте перед переводом.

"""


def parts_sums(ls: list) -> list:
    """
    Возвращает сумму подстрок списка по шаблону.
    """
    return [(n := i and (n + x)) for i, x in enumerate([0] + ls[::-1])][::-1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([], [0]),
        ([0, 1, 3, 6, 10], [20, 20, 19, 16, 10, 0]),
        ([1, 2, 3, 4, 5, 6], [21, 20, 18, 15, 11, 6, 0]),
        ([744125, 935, 407, 454, 430, 90, 144, 6710213, 889, 810, 2579358], [10037855, 9293730,
                                                                             9292795, 9292388, 9291934, 9291504, 9291414, 9291270, 2581057, 2580168, 2579358, 0]),
    )
    for key, val in data:
        assert parts_sums(key) == val


if __name__ == '__main__':
    test()
