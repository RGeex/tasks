"""
В супермаркете очередь к кассам самообслуживания. Ваша задача — написать
функцию для расчета общего времени, необходимого всем клиентам для
оформления заказа!
вход

    клиенты: массив положительных целых чисел, представляющих очередь.
    Каждое целое число представляет клиента, а его значение — это
    количество времени, необходимое ему для оформления заказа.
    n: положительное целое число, количество касс.

выход

Функция должна возвращать целое число — общее требуемое время.
Важный

Пожалуйста, посмотрите примеры и пояснения ниже, чтобы убедиться, что вы
правильно поняли задачу :)
Примеры

queue_time([5,3,4], 1)
# should return 12
# because when n=1, the total time is just the sum of the times

queue_time([10,2,3,3], 2)
# should return 10
# because here n=2 and the 2nd, 3rd, and 4th people in the 
# queue finish before the 1st person has finished.

queue_time([2,3,10], 2)
# should return 12

Разъяснения

    Существует только ОДНА очередь, обслуживающая множество касс, и
    Порядок очереди НИКОГДА не меняется, и
    Первый человек в очереди (т.е. первый элемент в массиве/списке) переходит
    к кассе, как только она становится свободной.

NB. Вы должны предполагать, что все тестовые входные данные будут
действительными, как указано выше.

PS Ситуацию в этой ката можно сравнить с идеей пула потоков, более связанной
с компьютерной наукой, в отношении одновременного запуска нескольких
процессов: https://en.wikipedia.org/wiki/Thread_pool
"""


def queue_time(lst: list, n: int) -> int:
    """
    Вычисляет минимальное кол-во времени за которое магазин
    обслужит всех клиентов.
    """
    res = [0] * n

    for x in lst:
        res[min(enumerate(res), key=lambda x: x[1])[0]] += x

    return (max(res))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (([], 1), 0),
        (([5], 1), 5),
        (([2], 5), 2),
        (([1, 2, 3, 4, 5], 1), 15),
        (([1, 2, 3, 4, 5], 100), 5),
        (([2, 2, 3, 3, 4, 4], 2), 9),
    )
    for key, val in data:
        assert queue_time(*key) == val


if __name__ == '__main__':
    test()
