"""
учитывая матрицу n x n (2-7), определите, направлена ​​ли стрела в цель (х).
Теперь есть один из 4-х видов стрел (  '^', '>', 'v', '<' ) и только одна цель ( x)
Пустое место будет обозначено пробелом " ", цель - крестиком "x" и областью действия ">".
Примеры:
данная матрица 4х4:
[
  [' ', 'x', ' ', ' '],
  [' ', ' ', ' ', ' '], --> return true
  [' ', '^', ' ', ' '],
  [' ', ' ', ' ', ' ']
] 
данная матрица 4х4:
[
  [' ', ' ', ' ', ' '],
  [' ', 'v', ' ', ' '], --> return false
  [' ', ' ', ' ', 'x'],
  [' ', ' ', ' ', ' ']
] 

данная матрица 4х4:
[
  [' ', ' ', ' ', ' '],
  ['>', ' ', ' ', 'x'], --> return true
  [' ', '', ' ', ' '],
  [' ', ' ', ' ', ' ']
]
"""


def hit_the_target_1(arr: list[list[str]]) -> bool:
    """
    Определяет, попадет ли стрела в цель.
    """
    pos, tmp = [0, 0, 0], dict(zip('<>^v', [(0, -1), (0, 1), (-1, 0), (1, 0)]))
    for x, line in enumerate(arr):
        for y, n in enumerate(line):
            if n != ' ':
                pos[n != 'x'], pos[2] = [x, y], pos[2] or tmp.get(n, 0)
    return [b + abs(a - b) * c if a - b else b for a, b, c in zip(*pos)] == pos[0]


def hit_the_target_2(arr: list[list[str]]) -> bool:
    """
    Определяет, попадет ли стрела в цель.
    """
    return any(any(''.join(x).replace(' ', '') in [('>x', 'x<'), ('x^', 'vx')][i] for x in x) for i, x in enumerate((arr, zip(*arr))))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([
            [' ', 'x', ' ', ' '],
            [' ', ' ', ' ', ' '],
            [' ', '^', ' ', ' '],
            [' ', ' ', ' ', ' '],
        ], True),
        ([
            [' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' '],
            [' ', 'v', ' ', ' '],
            [' ', 'x', ' ', ' '],
        ], True),
        ([
            [' ', ' ', ' ', ' '],
            [' ', 'v', ' ', ' '],
            [' ', ' ', ' ', 'x'],
            [' ', ' ', ' ', ' '],
        ], False),
    )
    for key, val in data:
        assert hit_the_target_1(key) == val
        assert hit_the_target_2(key) == val


if __name__ == '__main__':
    test()
