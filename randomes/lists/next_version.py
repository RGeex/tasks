"""
Вам надоело менять версию вашего программного обеспечения вручную.
Вместо этого вы создадите небольшой сценарий, который сделает это за вас.
Упражнение

Создать функцию nextVersion, который примет строку в качестве параметра и
вернет строку, содержащую следующий номер версии.

Например:

Current           ->  Next version
"1.2.3"           ->  "1.2.4"
"0.9.9"           ->  "1.0.0"
"1"               ->  "2"
"1.2.3.4.5.6.7.8" ->  "1.2.3.4.5.6.7.9"
"9.9"             ->  "10.0"

Правила

Все числа, кроме первого, должны быть меньше 10: если они есть, необходимо
установить их в 0 и увеличивать следующее число по порядку.

Вы можете предположить, что все входные данные тестов действительны.
"""


def next_version(version: str) -> str:
    """
    Повышает текущую версию на 1.
    """
    res, x = [], 1
    for i, n in enumerate(version.split('.')[::-1], -len(version.split('.')) + 1):
        x, n = divmod(int(n) + x, 10)
        res.append(('' if i else str(x) if x else '') + str(n))
    return '.'.join(res[::-1])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("1.2.3", "1.2.4"),
        ("0.9.9", "1.0.0"),
        ("1", "2"),
        ("1.2.3.4.5.6.7.8", "1.2.3.4.5.6.7.9"),
        ("9.9", "10.0"),
    )
    for key, val in data:
        assert next_version(key) == val


if __name__ == '__main__':
    test()
