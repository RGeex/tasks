"""
Даны два положительных целых числа m (width)и n (height),
заполните двумерный список (или массив) размера m x n, следующим образом:

    (1) Все элементы в первой и последней строке и столбце равны 1.
    (2) Все элементы во второй и предпоследней строке и столбце равны 2,
        исключая элементы из шага 1.
    (3) Все элементы в третьей и предпоследней строке и столбце равны 3,
        исключая элементы из предыдущих шагов.
    И так далее ...

"""


def create_box1(m: int, n: int) -> list:
    """
    Создает массив элементов, увеличивающихся к центру.
    """
    return [[min([x+1, y+1, m-x, n-y]) for x in range(m)] for y in range(n)]


def create_box2(m: int, n: int) -> list:
    """
    Создает массив элементов, увеличивающихся к центру.
    """
    arr = [[y + 1 if y < x else x + 1 for y in range(m // 2 + m % 2)] for x in range(n // 2 + n % 2)]
    arr = [line + line[(not m % 2) - 2::-1] for line in arr]
    return arr + arr[(not n % 2) - 2::-1]


def test() -> None:
    """Тестирование работы алгоритмов."""
    data = (
        ((0, 0), []),
        ((1, 1), [
            [1],
        ]),
        ((7, 8), [
            [1, 1, 1, 1, 1, 1, 1],
            [1, 2, 2, 2, 2, 2, 1],
            [1, 2, 3, 3, 3, 2, 1],
            [1, 2, 3, 4, 3, 2, 1],
            [1, 2, 3, 4, 3, 2, 1],
            [1, 2, 3, 3, 3, 2, 1],
            [1, 2, 2, 2, 2, 2, 1],
            [1, 1, 1, 1, 1, 1, 1],
        ]),
    )
    for key, val in data:
        assert create_box1(*key) == val
        assert create_box2(*key) == val


if __name__ == '__main__':
    test()
