"""
учитывая массив значений и количество нищих, вы должны вернуть массив с суммой
того, что каждый нищий приносит домой, предполагая, что все они ходят
регулярно, от от первого до последнего.
Например: [1,2,3,4,5]для 2нищие вернут результат [9,6], как первый берет
[1,3,5], второй собирает [2,4].
Тот же массив с 3нищие, в свою очередь, обеспечили бы лучший результат для
второго нищего: [5,7,3], так как они соответственно примут [1,4], [2,5]и [3].
Также обратите внимание, что не все попрошайки должны принимать одинаковое
количество «предложений», а это означает, что длина массива не обязательно
кратна n;
длина может быть еще короче, и в этом случае последние нищие, конечно, ничего
не возьмут( 0).
Примечание: если вы не понимаете, почему эта ката про английских нищих, то
вы не знакомы с тем, как религиозно в королевстве воспринимают очереди ;)
Примечание 2: не изменяйте входной массив.
"""


def beggars(values: list, n: int) -> list:
    """
    Получает список полученных денег, каждым из N человек.
    """
    res = [0] * n
    for i, x in enumerate(n and values or []):
        res[n and i % n or 0] += x
    return res


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (([1,2,3,4,5],0),[]),
        (([1,2,3,4,5],1),[15]),
        (([1,2,3,4,5],2),[9,6]),
        (([1,2,3,4,5],3),[5,7,3]),
        (([1,2,3,4,5],6),[1,2,3,4,5,0]),
    )
    for key, val in data:
        assert beggars(*key) == val


if __name__ == '__main__':
    test()
