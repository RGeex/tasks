"""
Нам нужна функция count_sel()который получает массив или список целых чисел
(положительных и отрицательных) и может предоставить нам следующую информацию
в порядке и структуре, представленных ниже:

[(1), (2), (3), [[(4)], 5]]

(1) - Общее количество полученных целых чисел.

(2) — Общее количество различных значений, которые имеет массив.

(3) — общее количество значений, встречающихся только один раз.

(4) и (5) оба в списке

(4) – Это (или они) элемент(ы), который имеет (или имеет) максимальное появление.
Если их больше одного, элементы следует отсортировать (очевидно, по их значению)

(5) – Максимальное появление целого числа(ий)

Давайте посмотрим некоторые случаи

____ count_sel([-3, -2, -1, 3, 4, -5, -5, 5, -1, -5]) ----> [10, 7, 5, [[-5], 3]]

(1) - The list has ten elements (10 numbers)

(2) - We have seven different values: -5, -3, -2, -1, 3, 4, 5 (7 values)

(3) - The numbers that occur only once: -3, -2, 3, 4, 5 (5 values)

(4) and (5) - The number -5 occurs three times (3 occurrences)

____ count_sel([4, 4, 2, -3, 1, 4, 3, 2, 0, -5, 2, -2, -2, -5]) ----> [14, 8, 4, [[2, 4],
"""

from collections import Counter


def count_sel(lst: list) -> list:
    """
    Подсчет значений по шаблону из списка.
    """
    x = Counter(lst)
    m = max(x.values())
    n = [[k for k, v in x.items() if v == z] for z in (1, max(x.values()))]
    return [*map(len, (lst, x)), *[[f(n)] + [m] if i else f(n) for i, (f, n) in enumerate(zip((len, sorted), n))]]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([-3, -2, -1, 3, 4, -5, -5, 5, -1, -5], [10, 7, 5, [[-5], 3]]),
        ([5, -1, 1, -1, -2, 5, 0, -2, -5, 3], [10, 7, 4, [[-2, -1, 5], 2]]),
        ([-2, 4, 4, -2, -2, -1, 3, 5, -5, 5], [10, 6, 3, [[-2], 3]]),
        ([4, -5, 1, -5, 2, 4, -1, 4, -1, 1], [10, 5, 1, [[4], 3]]),
        ([4, 4, 2, -3, 1, 4, 3, 2, 0, -5, 2, -2, -2, -5], [14, 8, 4, [[2, 4], 3]]),
    )
    for key, val in data:
        assert count_sel(key) == val


if __name__ == '__main__':
    test()
