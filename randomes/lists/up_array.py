"""
Учитывая массив целых чисел любой длины, верните массив, в котором к значению,
представленному массивом, добавлена ​​1.

    массив не может быть пустым
    разрешены только неотрицательные однозначные целые числа

Возвращаться nil(или эквивалент на вашем языке) для недопустимых входных
данных.
Примеры

Допустимые массивы

[4, 3, 2, 5]вернусь [4, 3, 2, 6]
[1, 2, 3, 9]вернусь [1, 2, 4, 0]
[9, 9, 9, 9]вернусь [1, 0, 0, 0, 0]
[0, 1, 3, 7]вернусь [0, 1, 3, 8]

Неверные массивы

[1, -9]недействителен, потому что -9не является неотрицательным целым числом

[1, 2, 33]недействителен, потому что 33не является однозначным целым числом

"""


def up_array(arr: list) -> list:
    """
    К числу предствленному в виде списка цифр прибавляет единицу,
    возвращает массив цифр.
    """
    return list(map(int, str(int(''.join(map(str, arr))) + 1).zfill(len(arr)))) if arr and all(x in range(10) for x in arr) else None


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([2,3,9], [2,4,0]),
        ([9,9], [1,0,0]),
        ([0,4,2], [0,4,3]),
        ([4,3,2,5], [4,3,2,6]),
        ([1,2,3,9], [1,2,4,0]),
        ([9,9,9,9], [1,0,0,0,0]),
        ([0,1,3,7], [0,1,3,8]),
        ([1,-9], None),
        ([], None),
    )
    for key, val in data:
        assert up_array(key) == val


if __name__ == '__main__':
    test()
