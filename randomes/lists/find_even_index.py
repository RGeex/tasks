"""
Вам будет дан массив целых чисел.  Ваша задача состоит в том, чтобы взять этот
массив и найти индекс N, где сумма целых чисел слева от N равна сумме целых
чисел справа от N. Если нет такого индекса, который мог бы это сделать, верните - 1.

Например:

Допустим, вам дан массив {1,2,3,4,3,2,1}:
Ваша функция вернет индекс 3, потому что на 3-й позиции массива сумма левой части
индекса ({1,2,3}) и сумма правой части индекса ({3,2, 1}) оба равны 6.

Давайте посмотрим на другой.
Вам дан массив {1,100,50,-51,1,1}:
Ваша функция вернет индекс 1, потому что в 1-й позиции массива сумма левой части
индекса ({1}) и сумма правой части индекса ({50,-51,1,1 }) оба равны 1.

Последний:
Вам дан массив {20,10,-80,10,10,15,35}
В индексе 0 левая сторона {}
Правая сторона {10,-80,10,10,15,35}
Они оба равны 0 при сложении.  (Пустые массивы равны 0 в этой задаче)
Индекс 0 — это место, где левая и правая стороны равны.

Примечание. Помните, что в большинстве языков программирования/скриптов индекс
массива начинается с 0.

Вход:
Целочисленный массив длины 0 < arr < 1000. Числа в массиве могут быть любыми
целыми положительными или отрицательными.

Выход:
Наименьший индекс N, где сторона слева от N равна стороне справа от N.
Если вы не найдете индекс, соответствующий этим правилам, вы вернете -1.

Примечание:
Если вам дан массив с несколькими ответами, верните наименьший правильный индекс.
"""


def find_even_index(arr: list) -> int:
    """Поиск минимального индекса суммарной середины массива."""
    return next((i for i in range(len(arr)) if sum(arr[:i]) == sum(arr[i+1:])), -1)


def test() -> None:
    """Тестирование работы алгоритмов."""

    data = [
        ([0, 0, 0, 0, 0], 0),
        ([1, 2, 3, 4, 5, 6], -1),
        (list(range(1, 100)), -1),
        ([1, 2, 3, 4, 3, 2, 1], 3),
        (list(range(-100, -1)), -1),
        ([1, 100, 50, -51, 1, 1], 1),
        ([20, 10, 30, 10, 10, 15, 35], 3),
        ([-1, -2, -3, -4, -3, -2, -1], 3),
        ([20, 10, -80, 10, 10, 15, 35], 0),
        ([10, -80, 10, 10, 15, 35, 20], 6),
    ]

    for key, val in data:
        assert find_even_index(key) == val


if __name__ == '__main__':
    test()
