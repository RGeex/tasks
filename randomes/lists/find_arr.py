"""
Нам даны два массива целых чисел A и B, и мы должны вывести отсортированный массив с целыми числами,
удовлетворяющими следующим ограничениям:

    они присутствуют в обоих

    они встречаются более одного раза в A и более одного раза в B

    их значения находятся в заданном диапазоне

    они нечетные или четные, в зависимости от запроса

arrA = [1, -2, 7, 2, 1, 3, 7, 1, 0, 2, 3]
arrB = [2, -1, 1, 1, 1, 1, 2, 3, 3, 7, 7, 0]
rng = [-4, 4] # is the range of the integers from -4 to 4 (inclusive)
wanted = 'odd'

Процесс получения результата:

0, 1, 2, 3, 7, are the numbers present in arrA and arrB
1, 2, 3, 7,  occur twice or more in arrA and arrB
1, 2, 3,  are in the range [-4, 4]
1, 3, are odd
output: [1, 3] 

Для случая:

arrA = [1, -2, 7, 2, 1, 3, 4, 7, 1, 0, 2, 3, 0, 4]
arrB = [0, 4, 2, -1, 1, 1, 1, 1, 2, 3, 3, 7, 7, 0, 4]
rng = [-4, 4]
wanted = 'even'
output[0, 2, 4] 

Если нет элементов, отвечающих указанным выше ограничениям, результатом будет пустой массив.

Имя функции с соответствующим порядком ее аргументов и структурой выходных данных приведены ниже:

find_arr(arrA, arrB, rng, wanted) ----> []
"""


from collections import Counter


def find_arr(arrA: list, arrB: list, rng: list, wanted: str) -> list:
    """
    Поиск элементов по указанному шаблону.
    """
    return sorted(a for a, b in (Counter(arrA) & Counter(arrB)).items() if b > 1 and a in range(*map(sum, zip(rng, (0, 1)))) and [not a % 2, a % 2][wanted == 'odd'])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((
            [1, -2, 7, 2, 1, 3, 7, 1, 0, 2, 3],
            [2, -1, 1, 1, 1, 1, 2, 3, 3, 7, 7, 0],
            [-4, 4],
            'odd',
        ), [1, 3]),
        ((
            [1, -2, 7, 2, 1, 3, 4, 7, 1, 0, 2, 3, 0, 4],
            [0, 4, 2, -1, 1, 1, 1, 1, 2, 3, 3, 7, 7, 0, 4],
            [-4, 4],
            'even',
        ), [0, 2, 4]),
        ((
            [1, -2, 7, 2, 1, 3, 4, 7, 1, 0, 2, 3, 0, 4],
            [0, 4, 2, -1, 1, 1, 1, 1, 2, 3, 3, 7, 7, 0, 4],
            [-4, -1],
            'even',
        ), []),
    )
    for key, val in data:
        assert find_arr(*key) == val


if __name__ == '__main__':
    test()
