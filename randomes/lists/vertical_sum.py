"""
Числовая пирамида:

Изобразите числовую пирамиду, на которую начинается 1, а числа увеличиваются на 1.

Сегодня оно насчитывает всего nуровни.

Например, верхние 5 уровней пирамиды выглядят так:

Pyramid with 5 levels:

        01
      02  03
    04  05  06
  07  08  09  10
11  12  13  14  15

Вертикальная сумма:

Теперь разобьем пирамиду на вертикальные линии и присвоим им индексы.

Индекс средней линии 0, увеличивается вправо, уменьшается влево.

В приведенном выше примере это будет выглядеть так:

Index:

  -4 -3 -2 -1  0  1  2  3  4
    |  |  |  |  |  |  |  |
    |  |  |  |01|  |  |  |
    |  |  |02|  |03|  |  |
    |  |04|  |05|  |06|  |
    |07|  |08|  |09|  |10|
  11|  |12|  |13|  |14|  |15
   ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑  ↑
  11  7 16 10 19 12 20 10 15

The above are the vertical sums.

А вертикальная сумма — это сумма всех чисел индекса.
Задача:

Вам будет присвоен номер nдля nуровни, количество iдля индекса.

Вам необходимо вернуть vertical sum.

Примеры:

вертикальная_сумма(n,i) --> вертикальная сумма

vertical_sum(4, -3) --> 7
vertical_sum(4, -1) --> 10
vertical_sum(4, 0)  --> 6
vertical_sum(4, 2)  --> 6
vertical_sum(4, 3)  --> 10
vertical_sum(5, -3) --> 7
vertical_sum(5, -1) --> 10
vertical_sum(5, 0)  --> 19
vertical_sum(5, 2)  --> 20
vertical_sum(5, 4)  --> 15

Не требуется высокая производительность

    п <= 100000

    -n <я <n

Учитывая вышеизложенное, решение, которое напрямую генерирует все числа вертикальной линии,
должно пройти, не O(1)решение все еще может пройти.

Для выборочных тестов и небольшого случайного ввода числа для вертикальной линии также
предоставляются в целях отладки.
"""


def vertical_sum1(n: int, i: int) -> int:
    """
    Вертикальная сумма пирамиды.
    """
    res, tmp = [], 0
    for x in range(n):
        tmp += x

        val = list(range(tmp + 1, tmp + x + 2))
        idx = list(range(n - x - 1, n + x, 2))

        res.append([val.pop(0) if y in idx else 0 for y in range(n * 2 - 1)])

    return sum(list(zip(*res))[n + i - 1])


def vertical_sum2(n: int, i: int) -> int:
    """
    Вертикальная сумма пирамиды.
    """
    return sum(x * (x + 1) // 2 + 1 + (x + i) // 2 for x in range(n) if x % 2 == i % 2 and abs(i) < x + 1)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((4, -3), 7),
        ((4, -1), 10),
        ((4, 0),  6),
        ((4, 2),  6),
        ((4, 3),  10),
        ((5, -3), 7),
        ((5, -1), 10),
        ((5, 0),  19),
        ((5, 2),  20),
        ((5, 4),  15),
    )
    for key, val in data:
        assert vertical_sum1(*key) == val
        assert vertical_sum2(*key) == val


if __name__ == '__main__':
    test()
