"""
Эмоциональная сортировка ( ︶︿︶)

У вас будет функция под названием « sortEmotions », которая будет возвращать
массив отсортированных эмоций . Он имеет два параметра, первый параметр с
именем « arr » ожидает массив эмоций , где эмоция будет одной из следующих:

    :D -> Супер счастлив
    :) -> Счастья
    :| -> Нормальный
    :( -> Грустно
    Т_Т -> Супер грустно

Пример массива: [ 'T_T', ':D', ':|', ':)', ':(' ]

А второй параметр называется « порядок », если этот параметр верен , то
порядок эмоций будет нисходящим (от СуперСчастливого до СуперГрустного ),
если он ложный , то будет восходящим (от СуперГрустного до СуперСчастливого ).

Пример, если порядок верен для приведенного выше массива: [ ':D', ':)', ':|', ':(', 'T_T' ]

    Суперсчастливый -> Счастливый -> Нормальный -> Грустный -> Супергрустный

Если заказ ложный: [ 'T_T', ':(', ':|', ':)', ':D' ]

    Супергрустный -> Грустный -> Нормальный -> Счастливый -> Суперсчастливый

Пример:

arr = [':D', ':|', ':)', ':(', ':D']
sortEmotions(arr, true) // [ ':D', ':D', ':)', ':|', ':(' ]
sortEmotions(arr, false) // [ ':(', ':|', ':)', ':D', ':D' ]

Подробнее в тестовых случаях!

Примечания:

    Массив может быть пустым, в этом случае верните тот же пустой массив ¯\_( ツ )_/¯
    Все эмоции будут действительными
"""

def sort_emotions(arr: list[str], order: bool) -> list[str]:
    """
    Сортирует список эмоций.
    """
    return sorted(arr, key=':D :) :| :( T_T'.split()[::[-1, 1][order]].index)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (([ ':D', 'T_T', ':D', ':(' ], True), [ ':D', ':D', ':(', 'T_T' ]),
        (([ 'T_T', ':D', ':(', ':(' ], True), [ ':D', ':(', ':(', 'T_T' ]),
        (([ ':)', 'T_T', ':)', ':D', ':D' ], True), [ ':D', ':D', ':)', ':)', 'T_T' ]),
        (([ ':D', 'T_T', ':D', ':(' ], False), [ 'T_T', ':(', ':D', ':D' ]),
        (([ 'T_T', ':D', ':(', ':(' ], False), [ 'T_T', ':(', ':(', ':D' ]),
        (([ ':)', 'T_T', ':)', ':D', ':D' ], False),  [ 'T_T', ':)', ':)', ':D', ':D' ]),
        (([], False), []),
        (([], True), []),
    )
    for key, val in data:
        assert sort_emotions(*key) == val


if __name__ == '__main__':
    test()
