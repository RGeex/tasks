"""
Задача о максимальной сумме подмассива состоит в нахождении максимальной
суммы непрерывной подпоследовательности в массиве или списке целых чисел:

max_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
# должно быть 6: [4, -1, 2, 1]

Простой случай — это когда список состоит только из положительных чисел,
а максимальная сумма — это сумма всего массива.

Пустой список считается имеющим нулевую наибольшую сумму. Обратите внимание,
что пустой список или массив также является допустимым подсписком/подмассивом.
"""


def max_sequence_index(arr: list) -> tuple | int:
    """Поиск элементов и их индексов максимальной суммы подмассива."""
    cur, res = [], [(0, float('-inf'))]
    for val in enumerate(arr):
        cur.append(val)
        cur = max(cur, [val], key=lambda n: sum(k[1] for k in n)).copy()
        res = max(cur, res, key=lambda n: sum(k[1] for k in n)).copy()
    return len(arr) and tuple(zip(*res))


def test() -> None:
    """Тестирование работы алгоритмов."""

    data = [
        ([], 0),
        ([-10, 5, 6, 7, -20, 5], ((1, 2, 3), (5, 6, 7))),
        ([-2, 1, -3, 4, -1, 2, 1, -5, 4], ((3, 4, 5, 6), (4, -1, 2, 1))),
    ]

    for key, val in data:
        assert max_sequence_index(key) == val


if __name__ == '__main__':
    test()
