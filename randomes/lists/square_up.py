"""
Учитывая целое число n, большее или равное 0, создайте и верните массив по следующему шаблону:

squareUp(3) => [0, 0, 1, 0, 2, 1, 3, 2, 1]
squareUp(2) => [0, 1, 2, 1]
squareUp(4) => [0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]

"""


def square_up(n: int) -> list:
    """
    Создание массива по заданному шаблону.
    """
    return [a for b in zip(*[[i + 1] * (n - i) + [0] * i for i in range(n)]) for a in b][::-1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (0, []),
        (1, [1]),
        (4, [0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]),
        (9, [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 4, 3, 2, 1, 0, 0, 0, 0,
             5, 4, 3, 2, 1, 0, 0, 0, 6, 5, 4, 3, 2, 1, 0, 0, 7, 6, 5, 4, 3, 2, 1, 0, 8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5, 4, 3, 2, 1]),
    )
    for key, val in data:
        assert square_up(key) == val


if __name__ == '__main__':
    test()
