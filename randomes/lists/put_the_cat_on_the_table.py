"""
Кот хочет лечь на стол, но проблема в том, что мы не знаем, где он находится в комнате!

Вы получите на входе:

    координаты кота представляют собой список длиной 2, со строкой на карте и столбцом на карте.
    карта комнаты в виде списка списков, где каждый элемент может иметь значение 0, если пусто,
    или 1, если это таблица (в комнате может быть только одна единица/списки никогда не будут пустыми).

Задача:

Вам нужно будет вернуть маршрут в таблицу, начиная с начальных координат кошки, в виде строки.
Маршрут должен представлять собой последовательность букв U, D, R, L, что означает «вверх», «вниз», «вправо», «влево». Порядок букв в выводе не важен.
Выходы:

    Путь кошки к столу в виде строки
    Если в комнате нет стола, вы должны вернуть «NoTable».
    если кошка находится за пределами комнаты, вы должны вернуть «NoCat»
    (этот вывод имеет приоритет над приведенным выше).
    Если кот уже лежит на столе, вы можете вернуть пустую строку.

Пример:

cat = [0,1]
room =[[0,0,0], [0,0,0], [0,0,1]]

The route will be "RDD", or "DRD" or "DDR"


"""


def put_the_cat_on_the_table(cat: list, room: list) -> str:
    """
    Возвращает маршрук кота до места, если есть кот и существует место, в противном случае сообщает об этом.
    """
    if any(len(rpos) <= cpos or cpos < 0 for cpos, rpos in zip(cat, (room, room[0]))):
        return 'NoCat'

    target = next(((x, row.index(1)) for x, row in enumerate(room) if sum(row)), 0)
    return ''.join(abs(b - a) * ['UD', 'LR'][x][0 < b - a] for x, (a, b) in enumerate(zip(cat, target))) if target else 'NoTable'


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((
            [-1, 0],
            [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 1]
            ],
        ), "NoCat"),
        ((
            [0, 0],
            [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 1]
            ],
        ), "DDRRR"),
        ((
            [0, 1],
            [
                [0, 0, 0, 0, 0, 0],
            ],
        ), "NoTable"),
    )
    for key, val in data:
        assert put_the_cat_on_the_table(*key) == val


if __name__ == '__main__':
    test()
