"""
Если бы нам нужно было создать игру «Крестики-нолики», нам бы хотелось знать, решено ли текущее состояние доски,
не так ли? Наша цель — создать функцию, которая будет проверять это за нас!

Предположим, что доска имеет вид массива 3x3, где значение равно 0если место пустует, 1если это «X» или 2если это «О», вот так:

[[0, 0, 1],
 [0, 1, 2],
 [2, 1, 0]]

Мы хотим, чтобы наша функция возвращала:

    -1 если доска еще не закончена И еще никто не выиграл (есть пустые места),
    1 если бы «X» выиграл,
    2 если бы «О» выиграло,
    0 если это кошачья игра (т.е. ничья).

Вы можете предположить, что переданная доска действительна в контексте игры в крестики-нолики.

"""


def is_solved(arr: list) -> int:
    """
    Определяет победителя или статус доски в крестики нолики.
    """
    return next((x for x in (1, 2) if {x} in map(set, [[x[i * [1, -1][n]] for i, x in enumerate(arr, n)] for n in (0, 1)] + list(zip(*arr)) + arr)), next((-1 for x in arr if 0 in x), 0))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([[[1, 1, 1], [0, 2, 2], [0, 0, 0]], 1]),
        ([[[1, 2, 0], [0, 1, 2], [0, 0, 1]], 1]),
        ([[[2, 1, 1], [0, 1, 1], [2, 2, 2]], 2]),
        ([[[2, 2, 2], [0, 1, 1], [1, 0, 0]], 2]),
        ([[[2, 1, 2], [2, 1, 1], [1, 2, 1]], 0]),
        ([[[1, 2, 1], [1, 1, 2], [2, 1, 2]], 0]),
        ([[[2, 0, 2], [2, 1, 1], [1, 2, 1]], -1]),
        ([[[0, 0, 2], [0, 0, 0], [1, 0, 1]], -1]),
        ([[[1, 2, 1], [1, 1, 2], [2, 2, 0]], -1]),
        ([[[0, 1, 1], [2, 0, 2], [2, 1, 0]], -1]),
    )
    for key, val in data:
        assert is_solved(key) == val


if __name__ == '__main__':
    test()
