fire = 5
grass = 4
water = 6
electric = 5


x, db = 0, 'electric water fire grass water'.split()

"""
Это битва покемонов! Ваша задача — рассчитать ущерб, который нанесет
конкретный ход, используя следующую формулу (а не ту, что есть в игре):

damage = 50 * (attack / defense) * effectiveness

Где:

    атака = ваша сила атаки
    защита = защита противника
    эффективность = эффективность атаки в зависимости от матчапа
    (см. объяснение ниже)

Эффективность:

Атаки могут быть сверхэффективными, нейтральными или не очень эффективными в
зависимости от матчапа. Например, вода будет очень эффективна против огня,
но не очень эффективна против травы.

    Суперэффективно: 2x урон
    Нейтрально: 1x урон
    Не очень эффективно: урон 0,5x.

Чтобы это ката не было утомительным, вы будете иметь дело только с четырьмя
типами: fire, water, grass, и electric. Вот эффективность каждого матчапа:

    fire > grass

    fire < water

    fire = electric

    water < grass

    water < electric

    grass = electric

В этом ката любой тип против самого себя не очень эффективен.
Также предположим, что отношения между разными типами симметричны
(если A очень эффективен против B, затем B не очень эффективен против A).

Функция, которую вы должны реализовать, принимает:

    ваш тип
    тип противника
    твоя сила атаки
    защита противника
"""


def calculate_damage(y: str, o: str, a: int, d: int) -> int:
    """
    Вычисляет урон нанесенный в ходе битвы по заданной формуле.
    """
    db = {
        'fire': ['grass', 'water', 'electric'],
        'grass': ['water', 'fire', 'electric'],
        'water': ['fire', 'grass electric', ''],
        'electric': ['water', '', 'fire grass'],
    }
    return 50 * (a / d) * next(([2, .5, 1][i] for i, x in enumerate(db[y]) if o in x.split()), .5)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (("fire", "water", 100, 100), 25),
        (("grass", "water", 100, 100), 100),
        (("electric", "fire", 100, 100), 50),
        (("grass", "electric", 57, 19), 150),
        (("grass", "water", 40, 40), 100),
        (("grass", "fire", 35, 5), 175),
        (("fire", "electric", 10, 2), 250),
    )
    for key, val in data:
        assert calculate_damage(*key) == val


if __name__ == '__main__':
    test()
