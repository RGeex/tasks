"""
Представьте себе фотографию, сделанную для использования в рекламе. Фон слева от мотива беловатый, и вы хотите написать на этом фоне какой-нибудь текст. Итак, вы сканируете фотографию сканером с высоким разрешением и для каждой строки подсчитываете количество пикселей слева, которые достаточно белые и подходят для письма. Ваша задача — найти площадь наибольшего текстового поля, которое вы можете разместить на этих пикселях.

Пример: На рисунке ниже белесые фоновые пиксели отсканированной фотографии обозначены звездочками.

*********************************
*********
*******
******
******
******
**************
**************
**************
***************
*********************

Если вы посчитаете пиксели в каждой строке слева, вы получите список (или массив, в зависимости от
того, какой язык вы используете) [33, 9, 7, 6, 6, 6, 14, 14, 14, 15, 21]. Самый большой реактивный
угол, который вы можете разместить на этих пикселях, имеет площадь 70 и обозначен точками на
рисунке ниже.

*********************************
*********
*******
******
******
******
..............
..............
..............
..............*
..............*******

Напишите функцию, которая по списку чисел беловатых пикселей в каждой строке фона возвращает
площадь наибольшего прямоугольника, помещающегося на этом фоне.
"""

from itertools import groupby as gb


def largest_rect1(arr: list) -> int:
    """
    Поиск максимальной площади.
    """
    return max([v * (sum(next((n for n, x in enumerate(lst) if x < v), len(lst)) for lst in (arr[i:], arr[i::-1])) - 1) for i, v in enumerate(arr)] or [0])


def largest_rect2(arr: list) -> int:
    """
    Поиск максимальной площади.
    """
    return max(x * max(sum(n) for _, n in gb([not n < x for n in arr or [0]])) for x in arr or [0])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([], 0),
        ([0], 0),
        ([0, 0, 0], 0),
        ([1, 1, 1], 3),
        ([1, 2, 3], 4),
        ([3, 2, 1], 4),
        ([3, 5, 12, 4, 10], 16),
        ([6, 2, 5, 4, 5, 1, 6], 12),
        ([9, 7, 5, 4, 2, 5, 6, 7, 7, 5, 7, 6, 4, 4, 3, 2], 36),
    )
    for key, val in data:
        assert largest_rect1(key) == val
        assert largest_rect2(key) == val


if __name__ == '__main__':
    test()
