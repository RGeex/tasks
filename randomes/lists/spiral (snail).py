"""
Учитывая n x n array, возвращает элементы массива, расположенные от самых
крайних элементов до среднего элемента, перемещаясь по часовой стрелке.

array = [[1,2,3],
         [4,5,6],
         [7,8,9]]
snail(array) #=> [1,2,3,6,9,8,7,4,5]

Для лучшего понимания последовательно следуйте номерам следующего массива:

array = [[1,2,3],
         [8,9,4],
         [7,6,5]]
snail(array) #=> [1,2,3,4,5,6,7,8,9]

Это изображение проиллюстрирует ситуацию более четко:

ПРИМЕЧАНИЕ. Идея не в том, чтобы сортировать элементы от наименьшего значения
к наибольшему; идея состоит в том, чтобы пройти по двумерному массиву по схеме
«раковина улитки» по часовой стрелке.

ПРИМЕЧАНИЕ 2. 0x0 (пустая матрица) представлена ​​как пустой массив внутри массива. 
"""


def snail1(arr: list[list[int]]) -> list[int]:
    """
    Создание списка элементов по спирали.
    """
    x, y, dx, dy = 0, 0, 0, 1
    res, ln = [], len(arr[0])

    tmp = sorted(list(range(1, ln)) * 2 + [ln])[::-1]
    steps = [sum(tmp[:x + 1]) for x in range(len(tmp))]

    for i in range(sum(map(len, arr))):
        if i + 1 in steps:
            dx, dy = dy, -dx

        res.append(arr[x][y])
        x += dx
        y += dy
    return res


def snail2(arr: list[list[int]]) -> list[int]:
    """
    Создание списка элементов по спирали.
    """
    res = []

    while len(arr):
        res += arr.pop(0)
        arr = list(zip(*arr))[::-1]

    return res


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (
            [[]],
            [],
        ),
        (
            [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9],
            ],
            [1, 2, 3, 6, 9, 8, 7, 4, 5],
        ),
        (
            [
                [1, 2, 3],
                [8, 9, 4],
                [7, 6, 5],
            ],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
        ),
        (
            [
                [383, 356, 860, 661, 369, 785, 530, 885, 19, 564, 935],
                [106, 561, 797, 120, 785, 362, 313, 156, 624, 135, 499],
                [274, 25, 867, 716, 156, 423, 266, 971, 230, 924, 58],
                [5, 948, 367, 923, 453, 399, 368, 500, 335, 929, 856],
                [633, 8, 496, 456, 792, 361, 419, 307, 968, 958, 118],
                [83, 552, 554, 29, 408, 34, 549, 834, 409, 789, 553],
                [987, 60, 170, 659, 132, 776, 561, 724, 871, 582, 426],
                [203, 896, 584, 91, 770, 365, 81, 105, 398, 204, 206],
                [673, 527, 40, 241, 127, 958, 516, 200, 826, 522, 5],
                [53, 799, 134, 541, 440, 967, 741, 94, 138, 859, 521],
                [569, 148, 235, 9, 982, 710, 145, 691, 268, 808, 478],
            ],
            [383, 356, 860, 661, 369, 785, 530, 885, 19, 564, 935, 499, 58, 856,
             118, 553, 426, 206, 5, 521, 478, 808, 268, 691, 145, 710, 982, 9,
             235, 148, 569, 53, 673, 203, 987, 83, 633, 5, 274, 106, 561, 797,
             120, 785, 362, 313, 156, 624, 135, 924, 929, 958, 789, 582, 204,
             522, 859, 138, 94, 741, 967, 440, 541, 134, 799, 527, 896, 60,
             552, 8, 948, 25, 867, 716, 156, 423, 266, 971, 230, 335, 968,
             409, 871, 398, 826, 200, 516, 958, 127, 241, 40, 584, 170, 554,
             496, 367, 923, 453, 399, 368, 500, 307, 834, 724, 105, 81, 365,
             770, 91, 659, 29, 456, 792, 361, 419, 549, 561, 776, 132, 408, 34],
        )
    )
    for key, val in data:
        assert snail1(key) == val
        assert snail2(key) == val


if __name__ == '__main__':
    test()
