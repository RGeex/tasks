"""
Задача 1:
- Дано: отсортированный список натуральных чисел.
- Вернуть: отсортированный список квадратов чисел, изначального списка

Задача 2:
- Дано: список, число (интервал среза) 0 <= N < len(lst)
- Вернуть: список с максимальными значениями полных срезов всего списка
- Пример:
    дано: [6,1,3,7,5], N = 3
    результат: [6,7,7]
"""


def get_sorts_pow(lst1: list[int]) -> list[int]:
    """Создает отсортированный список квадратов, отсортированного списка."""
    result = []
    indexs = [0, -(len(lst1) - 1)]  # индексы первого и последнего элементов
    for _ in range(len(lst1)):
        # по индексам извлекаем абсолютное значение из списка
        num1, num2 = map(abs, (lst1[indexs[0]], lst1[abs(indexs[1])]))
        # записываем максимальное значение в квадрате
        result.append(max(num1, num2) ** 2)
        # двигаем индекс большего числа
        indexs[num1 <= num2] += 1
    return result[::-1]


def get_slice_max(lst2: list[int], num: int) -> list[int]:
    """Создает список максимальных значений срезов заданной длины пошагово."""
    return [max(lst2[i:i + num]) for i in range(len(lst2) - num + 1)]


def test() -> None:
    """Тестирование работы алгоритмов."""
    lst1 = [-5, -2, 0, 1, 2, 3, 4]
    lst2 = get_sorts_pow(lst1)
    lst3 = get_slice_max(lst1, 3)
    lst4 = [0, 1, 4, 4, 9, 16, 25]
    lst5 = [0, 1, 2, 3, 4]

    assert lst2 == lst4
    assert lst3 == lst5


if __name__ == '__main__':
    test()
