"""
Сэм — заядлый коллекционер цифр. Каждый раз, когда он находит новое число,
он бросает его на верх своей стопки чисел. Помогите Сэму организовать свою
коллекцию, чтобы он мог взять ее на Международную конференцию коллекционеров
номеров в Кельне.

Учитывая массив чисел, ваша функция должна возвращать массив массивов, где
каждый подмассив содержит все дубликаты определенного числа. Подмассивы
должны располагаться в том же порядке, что и первое появление числа,
которое они содержат:

group([3, 2, 6, 2, 1, 3])
>>> [[3, 3], [2, 2], [6], [1]]

Предположим, что входные данные всегда будут представлять собой массив чисел.
Если входные данные представляют собой пустой массив, должен быть возвращен
пустой массив.
"""


from collections import Counter


def group(arr: list[int]) -> list[list[int]]:
    """
    Группирует одинаковые числа на отдельные списки по их кол-ву
    в исходном в том же порядке.
    """
    return [[a] * b for a, b in Counter(arr).items()]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([3, 2, 6, 2, 1, 3], [[3, 3], [2, 2], [6], [1]]),
        ([3, 2, 6, 2], [[3], [2, 2], [6]]),
        ([], []),
        ([1, 100, 4, 2, 4], [[1], [100], [4, 4], [2]]),
        ([-1, 1, -1], [[-1, -1], [1]]),
    )
    for key, val in data:
        assert group(key) == val


if __name__ == '__main__':
    test()
