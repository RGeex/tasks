"""
Предположим, студент может заработать 100% на экзамене,
ответив на все правильные или неправильные ответы.
Учитывая потенциально неполный ключ ответа и ответы учащегося,
напишите функцию, которая определяет, сможет ли учащийся набрать 100%.
Неполные вопросы отмечены подчеркиванием «_».

["A", "_", "C", "_", "B"] # клавиша ответа
 ["A", "D", "C", "E", "B"] # решение учащегося

 ➞ Верно

 # Студент может правильно ответить на все вопросы.

 ["B", "_", "B"] # клавиша ответа
 ["B", "D", "C"] # решение ученика

 ➞ Ложь

 # Первый вопрос правильный, а третий неправильный, поэтому невозможно набрать 100%.

 ["T", "_", "F", "F", "F"] # клавиша ответа
 ["F", "F", "T", "T", "T"] # решение ученика

 ➞ Верно

 # Студент может ответить неправильно на все вопросы.
"""


def possibly_perfect(key: list[str], answers: list[str]) -> bool:
    """
    Проверяет, может ли студент набрать 100%.
    """
    return len({a == b for a, b in zip(key, answers) if a.isalpha()}) in (0, 1)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((['A', '_', 'C', '_', 'B'], ['A', 'D', 'C', 'E', 'B']), True),
        ((['B', '_', 'B'], ['B', 'D', 'C']), False),
        ((['T', '_', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T']), True),
        ((['B', 'A', '_', '_'], ['B', 'A', 'C', 'C']), True),
        ((['A', 'B', 'A', '_'], ['B', 'A', 'C', 'C']), True),
        ((['A', 'B', 'C', '_'], ['B', 'A', 'C', 'C']), False),
        ((['B', '_'], ['C', 'A']), True),
        ((['B', 'A'], ['C', 'A']), False),
        ((['B'], ['B']), True),
        ((['_', 'T', '_', '_'], ['T', 'F', 'F', 'F']), True),
        ((['_', 'T', '_', '_'], ['T', 'T', 'F', 'T']), True),
        ((['_', 'T', 'T', 'T'], ['T', 'T', 'F', 'T']), False),
        ((['_', 'T', 'T', 'T'], ['T', 'T', 'T', 'T']), True),
        ((['_', 'T', 'T', 'T'], ['F', 'F', 'F', 'F']), True),
        ((['_', '_', '_', '_'], ['F', 'F', 'F', 'F']), True),
    )
    for key, val in data:
        assert possibly_perfect(*key) == val


if __name__ == '__main__':
    test()
