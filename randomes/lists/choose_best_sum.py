"""
Джон и Мэри хотят путешествовать между несколькими городами A, B, C...
У Мэри на листе бумаги указан список расстояний между этими городами.
ls = [50, 55, 57, 58, 60]. Джон устал от вождения и говорит Мэри,
что не хочет водить машину больше, чем t = 174 miles и он посещу только 3
города.

Какие расстояния и, следовательно, какие города они выберут, чтобы сумма
расстояний была как можно большей, чтобы угодить Мэри и Джону?
Пример:

Со списком lsи 3 города для посещения, они могут выбрать между: [50,55,57],
[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],
[55,58,60],[57,58,60].

Тогда суммы расстояний равны: 162, 163, 165, 165, 167, 168, 170, 172, 173, 175.

Самая большая возможная сумма с пределом 174во внимание. тогда 173и расстояния
3 соответствующие города [55, 58, 60].

Функция chooseBestSum(или choose_best_sumили... в зависимости от языка) примет
в качестве параметров t(максимальная сумма расстояний, целое число >= 0), k
(количество городов для посещения, k >= 1) и ls(список расстояний, все
расстояния являются целыми положительными или нулевыми числами, и в этом
списке есть хотя бы один элемент). Функция возвращает «лучшую» сумму, т.е.
максимально возможную сумму kрасстояния меньше или равные заданному пределу t,
если эта сумма существует, или иначе nil, null, None, Nothing, в зависимости от
языка. В этом случае с возвратом C, C++, D, Dart, Fortran, F#, Go, Julia, Kotlin,
Nim, OCaml, Pascal, Perl, PowerShell, Reason, Rust, Scala, Shell, Swift -1.
Примеры:

ts = [50, 55, 56, 57, 58] choose_best_sum(163, 3, ts) -> 163

xs = [50] choose_best_sum(163, 3, xs) -> nil (or null or ... or -1 (C++, C, D,
Rust, Swift, Go, ...)

ys = [91, 74, 73, 85, 73, 81, 87] choose_best_sum(230, 3, ys) -> 228
Примечания:

    постарайтесь не изменять входной список расстояний ls
    в некоторых языках этот «список» на самом деле представляет собой строку
    (см. Примеры тестов).
"""


from itertools import combinations as cb


def choose_best_sum(t: int, k: int, ls: list) -> int | None:
    """
    Поиск пути с максимально возможным пройденным расстоянием.
    """
    return max({x for x in map(sum, cb(ls, k)) if x <= t}, default=None)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((163, 3, [50, 55, 56, 57, 58]), 163),
        ((163, 3, [50]), None),
        ((230, 3, [91, 74, 73, 85, 73, 81, 87]), 228),
        ((331, 2, [91, 74, 73, 85, 73, 81, 87]), 178),
        ((331, 4, [91, 74, 73, 85, 73, 81, 87]), 331),
        ((331, 5, [91, 74, 73, 85, 73, 81, 87]), None),
        ((331, 1, [91, 74, 73, 85, 73, 81, 87]), 91),
        ((700, 6, [91, 74, 73, 85, 73, 81, 87]), 491),
        ((230, 4, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 230),
        ((430, 5, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 430),
        ((430, 8, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), None),
        ((880, 8, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 876),
        ((2430, 15, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 1287),
        ((100, 2, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 100),
        ((276, 3, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 276),
        ((3760, 17, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 3654),
        ((3760, 40, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), None),
        ((50, 1, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), 50),
        ((1000, 18, [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]), None),
    )
    for key, val in data:
        assert choose_best_sum(*key) == val


if __name__ == '__main__':
    test()
