"""
Арифметическая прогрессия определяется как такая, в которой существует постоянная разница между
последовательными членами данного ряда чисел. Вам предоставлены последовательные элементы
арифметической прогрессии. Однако есть одна загвоздка: в данном вам наборе чисел не хватает ровно
одного члена исходного ряда. В остальном данная серия аналогична оригинальному AP. Найдите
недостающий термин.

Вам нужно написать функцию, которая получает список, размер списка всегда будет не менее 3 чисел.
Пропущенный термин никогда не будет первым или последним.
Пример

find_missing([1, 3, 5, 9, 11]) == 7

PS: Это пример вопроса для конкурса инженеров Facebook на улице интервью. Мне показалось довольно
забавным решать на бумаге, используя математику, таким образом выводить алгоритм. Веселиться!
"""


def find_missing(lst: list[int]) -> int:
    """
    Поиск пропущенного значения арифметической прогресии.
    """
    return max((b - a, a + (b - a) // 2) for a, b in zip(lst, lst[1:]))[1]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([1, 25, 73], 49),
        ([1, 3, 5, 9, 11], 7),
        ([-9, -5, -1, 3, 11], 7),
        ([1, 3, 4, 5, 6, 7, 8, 9], 2),
        ([1, 2, 3, 4, 6, 7, 8, 9], 5),
        (x := list(range(-111, 111, 11)), x.pop(11)),
    )
    for key, val in data:
        assert find_missing(key) == val


if __name__ == '__main__':
    test()
