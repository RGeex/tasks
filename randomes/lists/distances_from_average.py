"""
Имея начальный список/массив данных, было бы статистически целесообразно узнать,
насколько каждое значение отличается от среднего.

Например, если за неделю работы вы собрали 55, 95, 62, 36, 48 контактов для своего
бизнеса, было бы интересно узнать общее количество (296), среднее значение (59,2),
а также насколько вы отклонялись от среднего значения каждый день.

Например, в первый день вы сделали что-то меньше указанного среднего значения (55,
т.е. -4,2 по сравнению со средним значением), намного больше во второй день
(95, т.е. на 35,8 больше среднего и т.д.).

Результирующий список/массив различий, начиная с [55, 95, 62, 36, 48]таким образом
[4.2, -35.8, -2.8, 23.2, 11.2].

Предполагая, что вы будете получать только допустимые входные данные
(т. е. только массивы/списки с числами), создайте функцию для этого, округляя каждую
разность до второго десятичного знака (в Haskell это не требуется);
дополнительные баллы, если вы сделаете это каким-то умным, хитрым или лаконичным способом :)
"""
import typing
import unittest


def distances_from_average(test_list: list[int]) -> list[int | float]:
    """
    Вычисляет разницу с общим средним значением для каждого числа.
    """
    num = sum(test_list) / len(test_list)
    return [round(num - n, 2) for n in test_list]


def test(func: typing.Callable, data: tuple[tuple[typing.Any, typing.Any]]) -> None:
    """Тестирование работы алгоритмов с помощью unittest."""

    def test_func(func: typing.Callable, key: typing.Any, val: typing.Any) -> typing.Callable:
        """Создает кейсы для тестирования."""
        return lambda self: self.assertEqual(func(key), val)

    funcs = {f'test_{i}': test_func(func, key, val) for i, (key, val) in enumerate(data, 1)}
    suite = unittest.TestLoader().loadTestsFromTestCase(type('Tests', (unittest.TestCase,), funcs))

    unittest.TextTestRunner().run(suite)


if __name__ == '__main__':
    test(distances_from_average, (
        ([55, 95, 62, 36, 48], [4.2, -35.8, -2.8, 23.2, 11.2]),
        ([1, 1, 1, 1, 1], [0, 0, 0, 0, 0]),
        ([1, -1, 1, -1, 1, -1], [-1.0, 1.0, -1.0, 1.0, -1.0, 1.0]),
        ([1, -1, 1, -1, 1], [-0.8, 1.2, -0.8, 1.2, -0.8]),
        ([2, -2], [-2.0, 2.0]),
        ([1], [0]),
        ([123, -65, 32432, -353, -534], [6197.6, 6385.6, -26111.4, 6673.6, 6854.6]),
        (range(101), list(range(50,-51,-1))),
        (range(1001), list(range(500,-501,-1))),
        (range(1000001), list(range(500000,-500001,-1))),
    ))
