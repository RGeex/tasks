"""
Учитывая массив, верните перевернутую версию массива (правда, это другой вид реверса),
вы переворачиваете части массива, вам будет предоставлен аргумент длины,
который представляет длину каждой части, которую вы должны перевернуть.

Например

selReverse([1,2,3,4,5,6], 2)
 //=> [2,1, 4,3, 6,5]

если после реверса некоторых частей массива длина оставшейся части массива не соответствует
аргументу длины, просто переверните их.

selReverse([2,4,6,8,10,12,14,16], 3)
 //=> [6,4,2, 12,10,8, 16,14]

selReverse(array, length)

    array - массив для обратного
    length - длина каждой части для изменения

Примечание. Если аргумент длины превышает длину массива, переверните их все, если аргумент длины
равен нулю, не переворачивайте вообще.

"""


def sel_reverse(arr: list, l: int) -> list:
    """
    Переворачивает список по заданным интервалам.
    """
    res, l = [], l or 1
    for i in range(0, len(arr), l):
        res += arr[i:i+l][::-1]
    return res


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (([2, 4, 6, 8, 10, 12, 14, 16], 3), [6, 4, 2, 12, 10, 8, 16, 14]),
        (([2, 4, 6, 8, 10, 12, 14, 16], 2), [4, 2, 8, 6, 12, 10, 16, 14]),
        (([1, 2, 3, 4, 5, 6], 2), [2, 1, 4, 3, 6, 5]),
        (([1, 2, 3, 4, 5, 6], 0), [1, 2, 3, 4, 5, 6]),
        (([1, 2, 3, 4, 5, 6], 10), [6, 5, 4, 3, 2, 1]),
    )
    for key, val in data:
        assert sel_reverse(*key) == val


if __name__ == '__main__':
    test()
