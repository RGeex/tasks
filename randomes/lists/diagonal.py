"""
В этой ката вам дается n x nмассив, и вы должны перемещаться по элементам по диагонали от
bottom right к top left.
Пример

  1 6 7
  7 2 4
  3 5 9

ваше решение должно возвращать элементы в следующем порядке

9
4 5
7 2 3
6 7
1

//=> [9, 4, 5, 7, 2, 3, 6, 7, 1]

Ваша задача написать функцию diagonal()который возвращает элементы массива указанным выше способом.
Другой пример

arr = [
 [4, 5, 7],
 [3, 9, 1],
 [7, 6, 2]
]

diagonal(arr) //=> [2, 1, 6, 7, 9, 7, 5, 3, 4]

Вы можете предположить, что тестовые примеры хорошо сформированы.
"""


def diagonal(arr: list[list]) -> list:
    """
    Диагонали матрицы в указанном порядке.
    """
    tmp = [[''] * i + x + [''] * (len(arr) - i - 1) for i, x in enumerate(arr)]
    return [x for n in [[c for c in n[::-1] if isinstance(c, int)] for n in zip(*tmp[::-1])][::-1] for x in n]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([
            [4, 5, 7],
            [3, 9, 1],
            [7, 6, 2]
        ], [2, 1, 6, 7, 9, 7, 5, 3, 4]),
    )
    for key, val in data:
        assert diagonal(key) == val


if __name__ == '__main__':
    test()
