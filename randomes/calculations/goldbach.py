"""
Гипотеза Гольдбаха — одна из старейших и самых известных нерешённых проблем теории чисел и всей
математики. Говорится:

Каждое четное целое число больше 2 можно выразить как сумму двух простых чисел. Например:

6 = 3 + 3
8 = 3 + 5
10 = 3 + 7 = 5 + 5
12 = 5 + 7

Некоторые правила для предположения:

    пары должны идти по убыванию, как [3,5], а не [5,3]

    все пары должны быть расположены в порядке возрастания первого элемента пары: [[5, 13], [7, 11]]
    принято
    но [[7, 11],[5, 13]]не принимается.

Напишите функцию, которая находит все одинаковые пары простых чисел:

def goldbach(even_number)

Вы должны вернуть массив, содержащий пары простых чисел, например:

[[5, 13], [7, 11]]  # even_number = 18

или

[[3, 31], [5, 29], [11, 23], [17, 17]] # even_number = 34
"""


def goldbach(n: int) -> list:
    """
    Поиск пар простых чисел, являющихся суммой заданного.
    """
    p = [2] + [x for x in range(3, n + 1, 2) if next((0 for i in range(3, int(x ** .5 + 1), 2) if not x % i), 1)]
    res, inx = [], [0, -len(p)]
    for i in range(1, len(p) + 1):
        if sum(x := p[inx[0]:abs(inx[1]):len(p) - (sum(inx) + 1 and i)] * [1, 2][not sum(inx) + 1]) == n:
            res.append(x)
        inx[n < sum(x)] += 1
    return res

def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (2, []),
        (4, [[2, 2]]),
        (6, [[3, 3]]),
        (8, [[3, 5]]),
        (10, [[3, 7], [5, 5]]),
        (52, [[5, 47], [11, 41], [23, 29]]),
        (54, [[7, 47], [11, 43], [13, 41], [17, 37], [23, 31]]),
        (56, [[3, 53], [13, 43], [19, 37]]),
        (58, [[5, 53], [11, 47], [17, 41], [29, 29]]),
    )
    for key, val in data:
        assert goldbach(key) == val


if __name__ == '__main__':
    test()
