"""
Простые числа расположены неравномерно. Например из 2к 3разрыв 1. От 3
к 5разрыв 2. От 7к 11это 4. Между 2 и 50 у нас есть следующие пары простых
чисел с двумя пробелами: 3-5, 5-7, 11-13, 17-19, 29-31, 41-43

Промежуток между простыми числами длины n представляет собой серию из n-1
последовательных составных чисел между двумя последовательными простыми
числами (см.: http://mathworld.wolfram.com/PrimeGaps.html ).

Напишем функцию разрыв с параметрами:

    g(целое число >= 2), что указывает на разрыв, который мы ищем.

    m(целое число > 2), что дает начало поиска (m включительно)

    n(целое число >= m), что дает конец поиска (n включительно)

В примере выше gap(2, 3, 50)вернется [3, 5] or (3, 5) or {3, 5}
это первая пара от 3 до 50 с пробелом в 2.

Таким образом, эта функция должна возвращать первую пару двух простых чисел,
разделенных пробелом в gмежду пределами m, nесли эти числа существуют,
в противном случае `nil или null или None или Nothing
(или... в зависимости от языка).

In such a case (no pair of prime numbers with a gap of `g`)
In C: return [0, 0]
In C++, Lua, COBOL: return `{0, 0}`. 
In F#: return `[||]`. 
In Kotlin, Dart and Prolog: return `[]`.
In Pascal: return Type TGap (0, 0).

Примеры:

- gap(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7}

    gap(2, 5, 5) --> nil. In C++ {0, 0}. In F# [||]. In Kotlin,
    Dart and Prolog return []`

    gap(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}

([193, 197] тоже такие простые числа с 4 пробелами между 130 и 200,
но это не первая пара)

    gap(6,100,110) --> nil or {0, 0} or ...: у нас между 100 и 110 101, 103,
    107, 109но 101-107не является 6-пробелом, потому что существует 103 между
    и 103-109не является 6-пробелом, потому что существует 107между.

    Дополнительные примеры возврата вы можете увидеть в разделе
    «Примеры тестов».
"""


def is_prime(n: int) -> int:
    """
    Проверяет, является ли число простым.
    """
    return next((0 for i in range(3, int(n ** .5 + 1), 2) if not n % i), 1)


def gap(x: int, a: int, b: int) -> list | None:
    """
    Поиск ближайших простых числа с указанной разницей из заданного диапазона.
    """
    res, a = [a] if not a % 2 and is_prime(a) or a == 2 else [], a if a % 2 else a + 1
    return next(([n - x, n] for n in range(a, b + 1, 2) if is_prime(n) and not res.append(n) and n - x in res[-2:]), None)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((2, 100, 110), [101, 103]),
        ((4, 100, 110), [103, 107]),
        ((6, 100, 110), None),
        ((8, 300, 400), [359, 367]),
        ((10, 300, 400), [337, 347]),
        ((2, 100, 103), [101, 103]),
    )
    for key, val in data:
        assert gap(*key) == val


if __name__ == '__main__':
    test()
