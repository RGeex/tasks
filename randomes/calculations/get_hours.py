"""
В этом ката вам предоставляется список, содержащий время, когда сотрудники приходили на работу
и уходили с работы.

Ваша задача — преобразовать этот список в список часов, отработанных сотрудником,
для каждого подсписка.

например.:

clock = [ ["2:00pm", "8:00pm"], ["8:00am", "4:30pm"] ] == [6.0, 8.5]

Преобразуйте время в число с плавающей запятой,
где: 15 min == .25 30 min == .5 45 min == .75 60 min == 1.

Кроме того, вы ДОЛЖНЫ округлить каждое число до ближайшего 0,25.
На этом объекте вы платите с интервалом в 15 минут.

Итак, если кто-то проработал ровно 9,21 часа, округлите это значение до 9,25.

Если время начала и время окончания совпадают, этот человек отработал бы 0,0 часов.

Иногда сотрудник приступает к работе во второй половине дня и заканчивает работу утром.
Ваш код должен иметь возможность справиться с этим.

"""


from operator import sub
from functools import reduce
from datetime import datetime as dt


def get_hours(shifts: list[str]) -> list[float]:
    """
    Вычисляет кол-во часов отработанных работником, за смену.
    """
    return [reduce(lambda a, b: int(a) + round(int(b) / 15) * .25, str(sub(*[dt.strptime(n, '%I:%M%p') for n in x][::-1]))[-8:-3].strip().split(':')) for x in shifts]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ([("2:00pm", "8:00pm"), ("8:00am", "4:30pm")], [6.0, 8.5]),
        ([("5:02am", "2:30pm"), ("10:00pm", "3:00am")], [9.5, 5.0]),
        ([("1:41pm", "6:50pm")], [5.25]),
        ([("12:01am", "3:00am"), ("3:00pm", "12:00pm")], [3.0, 21.0]),
    )
    for key, val in data:
        assert get_hours(key) == val


if __name__ == '__main__':
    test()
