"""
Палиндромные числа

Палиндромное число – это число, которое остается неизменным
даже при перестановке его цифр. Как и 16461, например, он «симметричен».

Непалиндромные числа можно соединить с палиндромными с помощью ряда операций.
Сначала непалиндромное число переворачивается, и результат добавляется к
исходному числу. Если результат не является палиндромным числом, это
повторяется до тех пор, пока не будет получено палиндромное число.
Числа Лишрела

Неизвестно, можно ли таким образом соединить все непалиндромные числа
с палиндромными числами. Хотя ни одно число не оказалось непарным,
многие из них, похоже, таковыми не являются. Например, число 196
не дает палиндрома даже после 700 000 000 итераций. Любое число,
которое никогда не становится палиндромным таким образом,
известно как число Лишрела.

Эта Ката посвящена нахождению палиндромного числа из исходного семени.

Вам будет дано число на входе, а на выходе вы должны вернуть строку,
содержащую количество итераций (т. е. сложений), которые вам пришлось
выполнить для достижения палиндромного результата, и само палиндромное
число, разделенные пробелом.

palindromize(195) == 4 9339
palindromize(265) == 5 45254
palindromize(750) == 3 6666

Некоторые предположения

Вы можете предположить, что все числа, предоставленные в качестве входных
данных, будут фактически сопоставлены с палиндромным результатом и что вы
достигнете этого результата менее чем за 1000 итераций и получите палиндром.
"""


def palindromize(num: int, count: int = 0) -> int:
    """
    Поиск кол-ва операций Лишрела, для получения палиндрома.
    """
    return num == (x := int(str(num)[::-1])) and count or palindromize(num + x, count + 1)


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (195, 4),
        (265, 5),
        (750, 3),
    )
    for key, val in data:
        assert palindromize(key) == val


if __name__ == '__main__':
    test()
