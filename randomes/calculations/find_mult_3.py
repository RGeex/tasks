"""
Учитывая определенное число, сколько цифр, кратных трем, можно получить,
используя его цифры.

Предположим, что у вас есть число 362. Из него можно получить следующие числа:
362 ----> 3, 6, 2, 36, 63, 62, 26, 32, 23, 236, 263, 326, 362, 623, 632

Но только:
3, 6, 36, 63 кратны трем.

Нам нужна функция, которая может получать число и выводить его в следующем
порядке:
    - количество кратных
    - максимальное кратное

Давайте рассмотрим случай, когда число имеет цифру 0 и повторяющиеся цифры:
6063 ----> 0, 3, 6, 30, 36, 60, 63, 66, 306, 360, 366, 603, 606, 630, 636, 660,
663, 3066, 3606, 3660, 6036, 6063, 6306, 6360, 6603, 6630

В этом случае все числа, кратные трем, будут равны 0, кроме 0.

6063 ----> 3, 6, 30, 36, 60, 63, 66, 306, 360, 366, 603, 606, 630, 636, 660,
663, 3066, 3606, 3660, 6036, 6063, 6306, 6360, 6603, 6630

Вышеуказанные случаи для функции:

find_mult_3(362) == [4, 63]

find_mult_3(6063) == [25, 6630]

В Javascript findMult_3(). Функция будет получать только положительные целые
числа (num > 0), и вам не придется беспокоиться о проверке записей.

Особенности случайных тестов:

Number of test = 100
1000 ≤ num ≤ 100000000
"""


from itertools import permutations as pm


def find_mult_3(num: int) -> list:
    """
    Поиск кол-ва числел кратных, а так же максимального числа
    кратного 3-м, составленного из цифр заданного числа.
    """
    res, n = {0, }, str(num)
    for i in range(len(n)):
        for k in set(pm(n, r=i+1)):
            if not (x := int(''.join(k))) % 3:
                res.add(x)
    return [len(res) - 1, max(res)]


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (362, [4, 63]),
        (6063, [25, 6630]),
        (7766553322, [55510, 766553322]),
    )
    for key, val in data:
        assert find_mult_3(key) == val


if __name__ == '__main__':
    test()
