"""
Вам даны два положительных целых числа aи b ( a < b <= 20000).
Завершите функцию, которая возвращает список всех чисел в интервале.
[a, b], цифры которого состоят из простых чисел ( 2, 3, 5, 7),
но которые сами по себе не являются простыми числами.

Будьте осторожны с выбором времени!
"""


def is_prime(x: int) -> bool:
    """
    Проверяет является ли число простым.
    """
    if not x % 2:
        return x == 2
    d = 3
    while d * d <= x and x % d:
        d += 2
    return d * d > x


def not_primes(a: int, b: int) -> list:
    """
    Поиск чисел состоящих из простых цифр, не являющихся простыми числами.
    """
    tmp = set('014689')
    return ([x for x in range(a, b) if not tmp & set(str(x)) and not is_prime(x)])


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((2, 222), [22, 25, 27, 32, 33, 35, 52, 55, 57, 72, 75, 77]),
        ((2, 77), [22, 25, 27, 32, 33, 35, 52, 55, 57, 72, 75]),
        ((2700, 3000), [2722, 2723, 2725, 2727, 2732, 2733,
                        2735, 2737, 2752, 2755, 2757, 2772, 2773, 2775]),
        ((500, 999), [522, 525, 527, 532, 533, 535, 537, 552, 553, 555, 572,
                      573, 575, 722, 723, 725, 732, 735, 737, 752, 753, 755, 772, 775, 777]),
        ((999, 2500), [2222, 2223, 2225, 2227, 2232, 2233, 2235, 2252, 2253, 2255, 2257, 2272,
                       2275, 2277, 2322, 2323, 2325, 2327, 2332, 2335, 2337, 2352, 2353, 2355, 2372, 2373, 2375]),
    )
    for key, val in data:
        assert not_primes(*key) == val


if __name__ == '__main__':
    test()
