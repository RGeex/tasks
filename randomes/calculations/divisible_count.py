"""
Завершите функцию, которая принимает 3 числа. x, y and k(где x ≤ y) и возвращает количество целых
чисел в диапазоне [x..y](включая оба конца), которые делятся на k.

Более научно: { i : x ≤ i ≤ y, i mod k = 0 }
Пример

Данный x = 6, y = 11, k = 2 функция должна вернуть 3, потому что есть три числа,
делящихся на 2 между 6 и 11: 6, 8, 10

    Примечание . Тестовые примеры очень большие. Для прохождения вам понадобится решение O(log n)
    или лучше. (Возможно решение с постоянным временем.)


"""


def divisible_count(x: int, y: int, k: int) -> int:
    """
    Кол-во чисел из заданного диапазона, кратных указанному числу за O(1).
    """
    return y // k - (x - 1) // k


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ((6, 11, 2), 3),
        ((11, 345, 17), 20),
        ((0, 1, 7), 1),
        ((20, 20, 2), 1),
        ((20, 20, 8), 0),
        ((19, 20, 2), 1),
        ((0, 10, 1), 11),
        ((11, 14, 2), 2),
        ((101, 9999999999999999999999999999999999999999999, 11),
         909090909090909090909090909090909090909081),
        ((1005, 9999999999999999999999999999999999999999999, 109),
         91743119266055045871559633027522935779807),
    )
    for key, val in data:
        assert divisible_count(*key) == val


if __name__ == '__main__':
    test()
