"""
Цветной треугольник создается из ряда цветов, каждый из которых красный,
зеленый или синий. Последовательные строки, каждая из которых содержит
на один цвет меньше, чем предыдущая, создаются с учетом двух
соприкасающихся цветов в предыдущей строке. Если эти цвета идентичны,
в новой строке используется тот же цвет. Если они разные, в новой
строке используется недостающий цвет. Это продолжается до тех пор,
пока не будет создана последняя строка, состоящая только из одного цвета.

Например, различные возможности:

Colour here:            G G        B G        R G        B R
Becomes colour here:     G          R          B          G

На более крупном примере:

R R G B R G B B
 R B R G B R B
  G G B R G G
   G R G B G
    B B R R
     B G R
      R B
       G

Вам будет предоставлена ​​первая строка треугольника в виде строки, и ваша
задача — вернуть окончательный цвет, который будет отображаться в нижней
строке в виде строки. В приведенном выше примере вам будет дано «RRGBRGBB»,
и вы должны вернуть «G».
"""

import math


def color(colors: set) -> str:
    """
    Возвращает один цвет на основе двух переданных.
    """
    return [*(colors if len(colors) == 1 else set('RGB') - colors)][0]


def triangle(row: str) -> str:
    """
    Определяет последний цвет в цветовой пирамиде.
    """
    if len(row) == 1:
        return row

    sub = 3 ** int(math.log(len(row) - 1, 3)) + 1
    new = len(row) - sub + 1

    if new == 1:
        return color({row[0], row[-1]})

    return triangle(''.join(color({row[i], row[i+sub-1]}) for i in range(new)))


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = [
        ['B', 'B'],
        ['GB', 'R'],
        ['RRR', 'R'],
        ['RGBG', 'B'],
        ['RBRGBRB', 'G'],
        ['RBRGBRBGGRRRBGBBBGG', 'G']
    ]
    for key, val in data:
        assert triangle(key) == val


if __name__ == '__main__':
    test()
