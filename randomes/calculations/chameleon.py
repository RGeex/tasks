"""
На каком-то острове обитает популяция хамелеонов. Хамелеоны здесь могут
быть только одного из трёх цветов – красного, зелёного и синего. Всякий
раз, когда встречаются два хамелеона разного цвета, они оба меняют свой
цвет на третий (т. е. когда встречаются красный и синий хамелеоны, они
оба могут стать зелеными). Другого способа изменить свой цвет у хамелеонов
нет (в частности, при встрече красного и синего хамелеонов они не могут
стать одновременно красными, можно предположить только третий цвет).
Хамелеоны хотят стать одного определенного цвета. Они могут планировать
встречи для достижения этой цели. Хамелеоны хотят знать, как быстро можно
достичь их цели (если она вообще может быть достигнута).

Формальная задача

Вход:
Цвет кодируется целым числом: 0 – красный, 1 – зеленый, 2 – синий.
Стартовая популяция хамелеонов задается как массив из трех целых
чисел с индексом, соответствующим цвету (т.е. [2, 5, 3] означает
2 красных, 5 зеленых и 3 синих хамелеона). Все числа неотрицательны,
их сумма находится между 1и int.MaxValue(максимально возможное значение
для intтип, на других языках). Желаемый цвет задается целым числом от 0 до 2.

Выход:
Kata.Chameleonдолжен возвращать минимальное количество встреч, необходимое для
изменения всех хамелеонов на заданный цвет, или -1, если это невозможно
(например, если все хамелеоны изначально имеют один другой цвет).

Примечания и подсказки
-- Некоторые тесты используют довольно большие входные значения.
Будьте эффективны.
-- Существует строгое доказательство того, что ответ равен -1 или не превышает
общего числа хамелеонов (таким образом, тип возвращаемого значения int
оправдано). Не беспокойтесь о переполнении.
"""


def chameleon(lst: list, n: int) -> int:
    """
    Поиск колличест пересечений хамелеонов для создания одного цвета.
    """
    a, b = sorted(lst[(n == 0):3 - (n == 2):1 + (n == 1)])
    if not (b - a) % 3 and (lst.count(0) < 2 or a == b):
        return min(a, b) + (b - a)
    return -1


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        (([0, 3, 0], 0), -1),
        (([0, 0, 17], 2), 0),
        (([0, 0, 17], 1), -1),
        (([1, 1, 15], 2), 1),
        (([34, 32, 35], 0), 35),
        (([4, 19, 0], 2), 19),
    )
    for key, val in data:
        assert chameleon(*key) == val


if __name__ == '__main__':
    test()
