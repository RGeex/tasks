"""
Чтобы отдать должное там, где это необходимо: эта задача была взята из ACMICPC-Северо-Западного
регионального соревнования по программированию. Спасибо авторам проблем.

Вы помогаете археологу расшифровать руны. Он знает, что это древнее общество использовало систему
счисления по основанию 10 и что они никогда не начинают числа с ведущего нуля. Он угадал большую
часть цифр, а также несколько операторов, но чтобы разобраться в остальном, ему нужна ваша помощь.

Профессор даст вам простое математическое выражение вида

[number][op][number]=[number]

Он преобразовал все известные ему руны в цифры. Единственные операторы, которые он знает, — это
сложение ( +),вычитание( -) и умножение ( *), так что это единственные, которые появятся. Каждое
число будет находиться в диапазоне от -1 000 000 до 1 000 000 и будет состоять только из цифр 0–9,
возможно, лидирующего - и, возможно, нескольких цифр. Если в выражении есть ?, они представляют
собой цифровую руну, которую профессор не знает (никогда не является оператором и никогда не
является ведущей -). Все символы ? в выражении будут представлять одну и ту же цифру (0–9),
и это не будет ни одна из других цифр в выражении. Ни одно число не будет начинаться с 0,
если само число не равно 0, поэтому 00 не будет допустимым числом.

Учитывая выражение, выясните значение руны, представленной вопросительным знаком. Если подходит
более одной цифры, укажите наименьшую. Если ни одна цифра не работает, это плохие новости для
профессора — это означает, что он неправильно понял некоторые руны. в этом случае выведите -1.

Завершите метод решения выражения, чтобы найти значение неизвестной руны. Метод принимает
строку в качестве параметра, представляющего выражение, и возвращает значение int,
представляющее неизвестную руну, или -1, если такой руны не существует.
"""

import re
from operator import eq


def solve_runes(runes: str) -> int:
    """
    Поиск значений руны.
    """
    for n in range(10):
        if str(n) in runes or not n and re.search(r'(^|[^\d?])\?[?\d]', runes):
            continue
        if eq(*map(eval, runes.replace('?', str(n)).split('='))):
            return n
    return -1


def test() -> None:
    """
    Тестирование работы алгоритмов.
    """
    data = (
        ("1+1=?", 2),
        ("123*45?=5?088", 6),
        ("-5?*-1=5?", 0),
        ("19--45=5?", -1),
        ("??*??=302?", 5),
        ("?*11=??", 2),
        ("??*1=??", 2),
        ("123?45*?=?", 0),
        ("?*123?45=?", 0),
        ("??605*-63=-73???5", 1),
        ("123?45+?=123?45", 0),
        ("?8?170-1?6256=7?2?14", 9),
        ("?38???+595???=833444", 2),
        ("123?45-?=123?45", 0),
        ("-7715?5--484?00=-28?9?5", 6),
        ("50685?--1?5630=652?8?", 4),
        ("??+??=??", -1),
        ("1?*1?=1??", 0),
        ("-?56373--9216=-?47157", 8),
    )
    for key, val in data:
        assert solve_runes(key) == val


if __name__ == '__main__':
    test()
